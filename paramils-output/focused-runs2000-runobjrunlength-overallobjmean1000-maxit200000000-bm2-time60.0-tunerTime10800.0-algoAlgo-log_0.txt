Call: /usr/bin/ruby ../scripts/param_ils_2_3_run.rb "-numRun" "0" "-scenariofile" "MPSO_scenario_run0.txt" "-validN" "1"


seed: 1234
algo: python mpso_wrapper_run0.py
tunerTimeout (CPU time): 10800.0
maxWallTime: 8640000.0
maxEvals: 100000000
run_obj: runlength
overall_obj: mean1000
instance_file: mpso-instances.txt
test_instance_file: mpso-test-instances.txt
N: 2000
cutoff_time: 60.0
cutoff_length: 400000
R: 10
pertubation_strength_basic: 
pertubation_strength_scaling: false
p_restart: 0.01
Run 1
Level 
========================================================
Starting ILS for level 1, i.e. a limit of N=2000, and cutoff time=60.0.
Current CPU time = 0, this run goes until 10800.0 
========================================================
New Incumbent: 0, 100000000 [0, 0]. With state c1=2.05, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 7.3821, 33990.0 [1, 60.0]. With state c1=2.05, c2=2.05, iter=5, rad=1, step=1.0
2/100000000, 16.976933/10800.0
        -> Worse random: c1=2.075 c2=2.15 iter=8 rad=1 step=0.5 (48918.0 [based on 1 runs with cutoff 60.0])
3/100000000, 46.506014/10800.0
        -> Worse random: c1=2 c2=2.025 iter=12 rad=2 step=1.2 (153780.0 [based on 1 runs with cutoff 60.0])
4/100000000, 94.954032/10800.0
        -> Worse random: c1=2.025 c2=2.05 iter=10 rad=3 step=0.5 (242940.0 [based on 1 runs with cutoff 60.0])
New inc: 8230.0
New Incumbent: 97.80248399999999, 8230.0 [1, 60.0]. With state c1=2.1, c2=2.05, iter=10, rad=3, step=0.5
          -> Take improving step to random c1=2.1 c2=2.05 iter=10 rad=3 step=0.5 (8230.0 [based on 1 runs with cutoff 60.0])

6/100000000, 122.39192299999999/10800.0
        -> Worse random: c1=2 c2=2.1 iter=8 rad=1 step=0.8 (130650.0 [based on 1 runs with cutoff 60.0])
New inc: 2415.0
New Incumbent: 123.99264299999999, 2415.0 [1, 60.0]. With state c1=2.15, c2=2.15, iter=12, rad=3, step=0.5
          -> Take improving step to random c1=2.15 c2=2.15 iter=12 rad=3 step=0.5 (2415.0 [based on 1 runs with cutoff 60.0])

8/100000000, 183.992643/10800.0
        -> Worse random: c1=2.075 c2=2.1 iter=8 rad=3 step=1.0 (289935.00091617845 [based on 1 runs with cutoff 60.0])
        -> Worse random: c1=2.05 c2=2.075 iter=12 rad=1 step=0.8 (32286.0 [based on 1 runs with cutoff 60.0])
10/100000000, 210.97508/10800.0
        -> Worse random: c1=2.075 c2=2 iter=12 rad=3 step=1.2 (102291.0 [based on 1 runs with cutoff 60.0])
        -> Worse random: c1=2.1 c2=2.025 iter=12 rad=3 step=0.8 (13554.0 [based on 1 runs with cutoff 60.0])
   BLS in iteration 1, start with c1=2.15 c2=2.15 iter=12 rad=3 step=0.5 (2415.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->10"], evaluating ...
12/100000000, 274.729451/10800.0
        -> worse: (288940.0009204093 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.025"], evaluating ...
        -> worse: (13014.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.125"], evaluating ...
        -> worse: (2505.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->8"], evaluating ...
New inc: 1146.0
New Incumbent: 281.48579099999995, 1146.0 [1, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
          -> Take improving step to neighbour c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (1146.0 [based on 1 runs with cutoff 60.0]) with flip 1

          
============= Performing 4 bonus runs of state: c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (1146.0 [based on 1 runs with cutoff 60.0]) ============ 

 Same incumbent, new precision:
New Incumbent: 282.80085699999995, 1277.5 [2, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
17/100000000, 323.95316099999997/10800.0
 Same incumbent, new precision:
New Incumbent: 323.95316099999997, 133340518.66666667 [3, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 325.219116, 100005671.25 [4, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
19/100000000, 340.74666099999996/10800.0
 Same incumbent, new precision:
New Incumbent: 340.74666099999996, 80030383.8 [5, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
          -> After 4 bonus runs: c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (80030383.8 [based on 5 runs with cutoff 60.0])

    Changing ["step: 0.5->1.0"], evaluating ...
20/100000000, 400.74666099999996/10800.0
        -> worse: (272154.0009134672 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2"], evaluating ...
21/100000000, 460.74666099999996/10800.0
        -> worse: (284682.00091083744 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 3->1"], evaluating ...
        -> worse: (5135.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2"], evaluating ...
23/100000000, 522.818937/10800.0
        -> worse: (283943.00091178453 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.2"], evaluating ...
24/100000000, 582.818937/10800.0
        -> worse: (281069.0009104565 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
25/100000000, 601.945191/10800.0
        -> worse: (87838.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.05"], evaluating ...
        -> worse: (1577.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 3->2"], evaluating ...
        -> worse: (1398.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
        -> worse: (1335.5 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.025"], evaluating ...
30/100000000, 616.1170490000001/10800.0
        -> worse: (36738.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.1"], evaluating ...
        -> worse: (2953.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.025"], evaluating ...
32/100000000, 677.928256/10800.0
        -> worse: (281117.00091189507 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.1"], evaluating ...
33/100000000, 737.928256/10800.0
        -> worse: (290298.0009167295 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.075"], evaluating ...
        -> worse: (22892.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.125"], evaluating ...
        -> worse: (1477.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.075"], evaluating ...
36/100000000, 770.60863/10800.0
        -> worse: (117366.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.125"], evaluating ...
        -> worse: (1311.0 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 8->5"], evaluating ...
39/100000000, 833.303912/10800.0
        -> worse: (268100.00091281417 [based on 1 runs with cutoff 60.0])
          
============= Performing 18 bonus runs of state: c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (80030383.8 [based on 5 runs with cutoff 60.0]) ============ 

 Same incumbent, new precision:
New Incumbent: 834.5933769999999, 66692187.666666664 [6, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
41/100000000, 878.2022139999999/10800.0
 Same incumbent, new precision:
New Incumbent: 878.2022139999999, 114310446.71428572 [7, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
42/100000000, 920.6807759999999/10800.0
 Same incumbent, new precision:
New Incumbent: 920.6807759999999, 150022516.0 [8, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
43/100000000, 961.6875729999999/10800.0
 Same incumbent, new precision:
New Incumbent: 961.6875729999999, 177800125.44444445 [9, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 963.316485, 160020470.0 [10, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
45/100000000, 1008.373036/10800.0
 Same incumbent, new precision:
New Incumbent: 1008.373036, 181838427.36363637 [11, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1009.839693, 166685462.75 [12, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
47/100000000, 1054.46217/10800.0
 Same incumbent, new precision:
New Incumbent: 1054.46217, 184633196.46153846 [13, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1055.852379, 171445240.0 [14, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
49/100000000, 1098.324695/10800.0
 Same incumbent, new precision:
New Incumbent: 1098.324695, 186683557.4 [15, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1099.635009, 175015900.0 [16, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1101.602497, 164720978.3529412 [17, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1106.543476, 155571855.44444445 [18, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
53/100000000, 1166.543476/10800.0
 Same incumbent, new precision:
New Incumbent: 1166.543476, 147399097.21057433 [19, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
54/100000000, 1212.522755/10800.0
 Same incumbent, new precision:
New Incumbent: 1212.522755, 160029392.4000456 [20, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1213.881339, 152409049.52385297 [21, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
 Same incumbent, new precision:
New Incumbent: 1215.169321, 145481414.04549602 [22, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
57/100000000, 1259.5024070000002/10800.0
 Same incumbent, new precision:
New Incumbent: 1259.5024070000002, 156548048.26090923 [23, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
          -> After 18 bonus runs for LM: c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (156548048.26090923 [based on 23 runs with cutoff 60.0])

   LM for iteration 1: c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (156548048.26090923 [based on 23 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 1): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 1): c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 156548048.26090923, based on 23 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (156548048.26090923 [based on 23 runs with cutoff 60.0])
c1=2.15 c2=2.15 iter=8 rad=3 step=0.5 (156548048.26090923 [based on 23 runs with cutoff 60.0])
LM better, change incumbent
New Incumbent: 1259.5024070000002, 156548048.26090923 [23, 60.0]. With state c1=2.15, c2=2.15, iter=8, rad=3, step=0.5
57/100000000, 1259.5024070000002/10800.0
iteration 2, flip 3, evaluation count 57
    perturb to ---> c1=2.15 c2=2.15 iter=5 rad=3 step=0.5 (268100.00091281417 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.15 c2=2.15 iter=5 rad=3 step=1.2 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.15 c2=2.15 iter=5 rad=1 step=1.2 (100000000 [based on 0 runs with cutoff 0])
58/100000000, 1319.5024070000002/10800.0
   BLS in iteration 2, start with c1=2.15 c2=2.15 iter=5 rad=1 step=1.2 (327595.0009110868 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.2->0.5"], evaluating ...
59/100000000, 1371.822196/10800.0
          -> Take improving step to neighbour c1=2.15 c2=2.15 iter=5 rad=1 step=0.5 (278610.0 [based on 1 runs with cutoff 60.0]) with flip 3

          
============= Performing 1 bonus runs of state: c1=2.15 c2=2.15 iter=5 rad=1 step=0.5 (278610.0 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.15 c2=2.15 iter=5 rad=1 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0])

    Changing ["step: 0.5->1.0"], evaluating ...
60/100000000, 1431.822196/10800.0
        -> worse: (313965.00091196626 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
61/100000000, 1491.822196/10800.0
        -> worse: (357972.00091219024 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
          -> Take improving step to neighbour c1=2.05 c2=2.15 iter=5 rad=1 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0]) with flip 4

          
============= Performing 3 bonus runs of state: c1=2.05 c2=2.15 iter=5 rad=1 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0]) ============ 

64/100000000, 1502.2706030000002/10800.0
66/100000000, 1538.3031520000002/10800.0
          -> After 3 bonus runs: c1=2.05 c2=2.15 iter=5 rad=1 step=0.5 (80019389.2 [based on 5 runs with cutoff 60.0])

    Changing ["iter: 5->12"], evaluating ...
67/100000000, 1598.3031520000002/10800.0
        -> worse: (348186.00091268064 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.025"], evaluating ...
68/100000000, 1627.6302230000001/10800.0
        -> worse: (152800.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.075"], evaluating ...
        -> worse: (38085.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.125"], evaluating ...
70/100000000, 1689.2864350000002/10800.0
        -> worse: (288440.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.1"], evaluating ...
71/100000000, 1749.2864350000002/10800.0
        -> worse: (322295.0009182153 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.1"], evaluating ...
72/100000000, 1786.7131870000003/10800.0
        -> worse: (201105.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
73/100000000, 1846.7131870000003/10800.0
        -> worse: (338141.0009123899 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.05"], evaluating ...
74/100000000, 1906.7131870000003/10800.0
        -> worse: (317565.00091149105 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
79/100000000, 1957.2401010000003/10800.0
          -> Take improving step to neighbour c1=2.05 c2=2.15 iter=5 rad=2 step=0.5 (80008543.2 [based on 5 runs with cutoff 60.0]) with flip 5

          
============= Performing 9 bonus runs of state: c1=2.05 c2=2.15 iter=5 rad=2 step=0.5 (80008543.2 [based on 5 runs with cutoff 60.0]) ============ 

80/100000000, 2003.3377290000003/10800.0
84/100000000, 2013.642706/10800.0
87/100000000, 2058.900845/10800.0
          -> After 9 bonus runs: c1=2.05 c2=2.15 iter=5 rad=2 step=0.5 (85722577.35714285 [based on 14 runs with cutoff 60.0])

    Changing ["rad: 2->3"], evaluating ...
        -> worse: (32065.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.075"], evaluating ...
90/100000000, 2128.531362/10800.0
        -> worse: (293200.0009118743 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.125"], evaluating ...
93/100000000, 2141.543483/10800.0
        -> worse: (31426.666666666668 [based on 3 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (6243.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.15"], evaluating ...
95/100000000, 2156.74415/10800.0
        -> worse: (60170.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.1"], evaluating ...
        -> worse: (16160.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.1"], evaluating ...
100/100000000, 2166.8781799999992/10800.0
103/100000000, 2217.944692999999/10800.0
108/100000000, 2228.3028149999996/10800.0
109/100000000, 2271.3092809999994/10800.0
          -> Take improving step to neighbour c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (57153134.78571428 [based on 14 runs with cutoff 60.0]) with flip 6

          
============= Performing 7 bonus runs of state: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (57153134.78571428 [based on 14 runs with cutoff 60.0]) ============ 

111/100000000, 2293.2151149999995/10800.0
112/100000000, 2353.2151149999995/10800.0
116/100000000, 2399.8472829999996/10800.0
          -> After 7 bonus runs: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (57173529.42861482 [based on 21 runs with cutoff 60.0])

    Changing ["c2: 2.1->2.075"], evaluating ...
118/100000000, 2461.3451609999997/10800.0
        -> worse: (288455.00091264315 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2"], evaluating ...
119/100000000, 2521.3451609999997/10800.0
        -> worse: (289405.00091416016 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
120/100000000, 2581.3451609999997/10800.0
        -> worse: (314713.00091303984 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.1"], evaluating ...
121/100000000, 2641.3451609999997/10800.0
        -> worse: (288995.0009126821 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (3561.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
123/100000000, 2703.081457/10800.0
        -> worse: (288485.0009146397 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.075"], evaluating ...
        -> worse: (4685.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.15"], evaluating ...
125/100000000, 2765.2243839999996/10800.0
        -> worse: (289255.0009150901 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.2"], evaluating ...
126/100000000, 2825.2243839999996/10800.0
        -> worse: (288390.00091573794 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.125"], evaluating ...
127/100000000, 2881.6679289999997/10800.0
        -> worse: (278295.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (30595.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2"], evaluating ...
129/100000000, 2948.3255799999997/10800.0
        -> worse: (293960.0009155938 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.05"], evaluating ...
130/100000000, 2973.6962449999996/10800.0
        -> worse: (120815.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.025"], evaluating ...
131/100000000, 3000.3551319999997/10800.0
        -> worse: (125560.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.025"], evaluating ...
        -> worse: (9530.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
        -> worse: (2275.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
134/100000000, 3065.0126609999998/10800.0
        -> worse: (269565.0009143955 [based on 1 runs with cutoff 60.0])
          
============= Performing 17 bonus runs of state: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (57173529.42861482 [based on 21 runs with cutoff 60.0]) ============ 

136/100000000, 3108.446144/10800.0
New inc: 69593715.60873528
New Incumbent: 3108.446144, 69593715.60873528 [23, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
137/100000000, 3148.64146/10800.0
 Same incumbent, new precision:
New Incumbent: 3148.64146, 83361269.16670464 [24, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3150.047596, 80026890.00003645 [25, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3156.732916, 76951082.11541966 [26, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
140/100000000, 3159.057034/10800.0
 Same incumbent, new precision:
New Incumbent: 3159.057034, 74101455.37040412 [27, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3160.426026, 71455069.6428897 [28, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
142/100000000, 3201.99278/10800.0
 Same incumbent, new precision:
New Incumbent: 3201.99278, 82784722.44830729 [29, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3203.323534, 80025279.36669704 [30, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3204.975875, 77443899.70970681 [31, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3206.959221, 75024045.65627848 [32, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
146/100000000, 3248.162945/10800.0
 Same incumbent, new precision:
New Incumbent: 3248.162945, 84871801.87881549 [33, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3249.599409, 82375636.23532093 [34, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3250.844125, 80022080.48574032 [35, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
149/100000000, 3263.158305/10800.0
 Same incumbent, new precision:
New Incumbent: 3263.158305, 77802398.66669197 [36, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 3265.333131, 75699946.6757003 [37, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
151/100000000, 3307.246615/10800.0
 Same incumbent, new precision:
New Incumbent: 3307.246615, 84234421.78949766 [38, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
          -> After 17 bonus runs for LM: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])

   LM for iteration 2: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 2): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 2): c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 84234421.78949766, based on 38 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
LM better, change incumbent
New Incumbent: 3307.246615, 84234421.78949766 [38, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
   Accepting new better local optimum: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
151/100000000, 3307.246615/10800.0
iteration 3, flip 8, evaluation count 151
    perturb to ---> c1=2.025 c2=2.1 iter=5 rad=2 step=0.5 (125560.0 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.025 c2=2.1 iter=12 rad=2 step=0.5 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.1 c2=2.1 iter=12 rad=2 step=0.5 (100000000 [based on 0 runs with cutoff 0])
152/100000000, 3367.246615/10800.0
   BLS in iteration 3, start with c1=2.1 c2=2.1 iter=12 rad=2 step=0.5 (331323.0009116241 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->5"], evaluating ...
          -> Take improving step to neighbour c1=2.1 c2=2.1 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0]) with flip 8

          
============= Performing 2 bonus runs of state: c1=2.1 c2=2.1 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0]) ============ 

          -> After 2 bonus runs: c1=2.1 c2=2.1 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 4 runs with cutoff 60.0])

    Changing ["c2: 2.1->2.075"], evaluating ...
153/100000000, 3380.884286/10800.0
          -> Take improving step to neighbour c1=2.1 c2=2.075 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 4 runs with cutoff 60.0]) with flip 9

          
============= Performing 1 bonus runs of state: c1=2.1 c2=2.075 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 4 runs with cutoff 60.0]) ============ 

157/100000000, 3401.5040639999997/10800.0
          -> After 1 bonus runs: c1=2.1 c2=2.075 iter=5 rad=2 step=0.5 (43429.0 [based on 5 runs with cutoff 60.0])

    Changing ["iter: 5->10"], evaluating ...
158/100000000, 3461.5040639999997/10800.0
        -> worse: (321345.0009211462 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2"], evaluating ...
163/100000000, 3510.502326/10800.0
        -> worse: (80006192.2 [based on 5 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.15"], evaluating ...
168/100000000, 3521.893783/10800.0
          -> Take improving step to neighbour c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (6681.0 [based on 5 runs with cutoff 60.0]) with flip 10

          
============= Performing 3 bonus runs of state: c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (6681.0 [based on 5 runs with cutoff 60.0]) ============ 

170/100000000, 3565.878025/10800.0
          -> After 3 bonus runs: c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (50006047.625 [based on 8 runs with cutoff 60.0])

    Changing ["c2: 2.075->2.125"], evaluating ...
174/100000000, 3609.726176/10800.0
        -> worse: (["pruned", 3] [based on 5 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
179/100000000, 3652.586264/10800.0
        -> worse: (80007850.2 [based on 5 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
        -> worse: (["pruned", 1] [based on 5 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
        -> worse: (42633.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
181/100000000, 3721.771875/10800.0
        -> worse: (330798.00091117684 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
182/100000000, 3781.771875/10800.0
        -> worse: (329550.0009131775 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.125"], evaluating ...
185/100000000, 3793.4313380000003/10800.0
        -> worse: (["pruned", 3] [based on 5 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.025"], evaluating ...
188/100000000, 3837.466943/10800.0
        -> worse: (["pruned", 3] [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.075->2.025"], evaluating ...
189/100000000, 3897.466943/10800.0
        -> worse: (296045.0009212245 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.075->2.05"], evaluating ...
192/100000000, 3942.4102789999997/10800.0
        -> worse: (["pruned", 3] [based on 5 runs with cutoff 60.0])
    Changing ["step: 0.5->1.2"], evaluating ...
193/100000000, 4002.4102789999997/10800.0
        -> worse: (294405.00091146893 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.075->2.15"], evaluating ...
        -> worse: (["pruned", 1] [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.075->2.1"], evaluating ...
        -> worse: (["pruned", 1] [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.075->2"], evaluating ...
194/100000000, 4062.4102789999997/10800.0
        -> worse: (293340.000911745 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
195/100000000, 4122.410279/10800.0
        -> worse: (296585.0009113378 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.075"], evaluating ...
196/100000000, 4182.410279/10800.0
        -> worse: (290290.0009110395 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
197/100000000, 4220.5403479999995/10800.0
        -> worse: (169455.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
        -> worse: (21985.0 [based on 1 runs with cutoff 60.0])
          
============= Performing 18 bonus runs of state: c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (50006047.625 [based on 8 runs with cutoff 60.0]) ============ 

201/100000000, 4233.1651729999985/10800.0
203/100000000, 4276.2498719999985/10800.0
205/100000000, 4319.553555999998/10800.0
208/100000000, 4362.361295999997/10800.0
209/100000000, 4422.361295999997/10800.0
210/100000000, 4464.978724999997/10800.0
213/100000000, 4479.141498999997/10800.0
214/100000000, 4519.994978999996/10800.0
216/100000000, 4563.556735999997/10800.0
          -> After 18 bonus runs for LM: c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (107713950.46157368 [based on 26 runs with cutoff 60.0])

   LM for iteration 3: c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (107713950.46157368 [based on 26 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 3): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 3): c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 84234421.78949766, based on 38 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (107713950.46157368 [based on 26 runs with cutoff 60.0])
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.15 c2=2.075 iter=5 rad=2 step=0.5 (107713950.46157368 [based on 26 runs with cutoff 60.0]), going back to c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
216/100000000, 4563.556735999997/10800.0
iteration 4, flip 12, evaluation count 216
    perturb to ---> c1=2.05 c2=2.125 iter=5 rad=2 step=0.5 (31426.666666666668 [based on 3 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.125 iter=5 rad=2 step=0.5 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.075 c2=2.125 iter=10 rad=2 step=0.5 (100000000 [based on 0 runs with cutoff 0])
217/100000000, 4623.556735999997/10800.0
   BLS in iteration 4, start with c1=2.075 c2=2.125 iter=10 rad=2 step=0.5 (316980.0009121928 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
          -> Take improving step to neighbour c1=2.1 c2=2.125 iter=10 rad=2 step=0.5 (21245.0 [based on 1 runs with cutoff 60.0]) with flip 12

          
============= Performing 1 bonus runs of state: c1=2.1 c2=2.125 iter=10 rad=2 step=0.5 (21245.0 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.1 c2=2.125 iter=10 rad=2 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0])

    Changing ["step: 0.5->1.0"], evaluating ...
219/100000000, 4688.637916999996/10800.0
        -> worse: (317480.0009119977 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->5"], evaluating ...
220/100000000, 4748.637916999996/10800.0
        -> worse: (290415.00091756246 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.15"], evaluating ...
          -> Take improving step to neighbour c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (2340.0 [based on 2 runs with cutoff 60.0]) with flip 13

          
============= Performing 3 bonus runs of state: c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (2340.0 [based on 2 runs with cutoff 60.0]) ============ 

          -> After 3 bonus runs: c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (2662.0 [based on 5 runs with cutoff 60.0])

    Changing ["step: 0.5->0.8"], evaluating ...
226/100000000, 4803.084601999997/10800.0
        -> worse: (242725.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
        -> worse: (30835.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
229/100000000, 4813.158147999998/10800.0
230/100000000, 4846.027501999998/10800.0
        -> worse: (133334870.33333333 [based on 3 runs with cutoff 60.0])
    Changing ["iter: 10->12"], evaluating ...
231/100000000, 4906.027501999998/10800.0
        -> worse: (334833.00091075024 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->5"], evaluating ...
        -> worse: (["pruned", 3] [based on 6 runs with cutoff 60.0])
    Changing ["c1: 2.15->2"], evaluating ...
        -> worse: (12050.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.025"], evaluating ...
234/100000000, 4970.7672509999975/10800.0
        -> worse: (316770.00091105414 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
        -> worse: (13495.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.075"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.125->2"], evaluating ...
236/100000000, 5034.362544999997/10800.0
        -> worse: (317005.00091112603 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
237/100000000, 5094.362544999997/10800.0
        -> worse: (316355.00091448205 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
        -> worse: (6270.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->8"], evaluating ...
        -> worse: (11085.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
        -> worse: (8050.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.2"], evaluating ...
241/100000000, 5107.259318999998/10800.0
        -> worse: (19325.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.1"], evaluating ...
246/100000000, 5120.252778999998/10800.0
        -> worse: (16223.0 [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
        -> worse: (18870.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.125"], evaluating ...
250/100000000, 5160.529912999998/10800.0
        -> worse: (133339488.66666667 [based on 3 runs with cutoff 60.0])
          
============= Performing 19 bonus runs of state: c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (2512.5 [based on 6 runs with cutoff 60.0]) ============ 

251/100000000, 5195.102655999997/10800.0
253/100000000, 5229.142272999997/10800.0
257/100000000, 5269.703416999996/10800.0
259/100000000, 5306.636516999996/10800.0
260/100000000, 5366.636516999996/10800.0
263/100000000, 5429.536467999997/10800.0
267/100000000, 5471.1839619999955/10800.0
268/100000000, 5505.476959999995/10800.0
          -> After 19 bonus runs for LM: c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (96033675.44007297 [based on 25 runs with cutoff 60.0])

   LM for iteration 4: c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (96033675.44007297 [based on 25 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 4): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 4): c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 84234421.78949766, based on 38 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (96033675.44007297 [based on 25 runs with cutoff 60.0])
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.15 c2=2.125 iter=10 rad=2 step=0.5 (96033675.44007297 [based on 25 runs with cutoff 60.0]), going back to c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
269/100000000, 5507.082014999995/10800.0
iteration 5, flip 15, evaluation count 269
    perturb to ---> c1=2.025 c2=2.1 iter=5 rad=2 step=0.5 (125560.0 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.025 c2=2.15 iter=5 rad=2 step=0.5 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.025 c2=2.15 iter=5 rad=2 step=0.8 (100000000 [based on 0 runs with cutoff 0])
   BLS in iteration 5, start with c1=2.025 c2=2.15 iter=5 rad=2 step=0.8 (17815.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2"], evaluating ...
271/100000000, 5572.138193999996/10800.0
        -> worse: (292995.0009126302 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.075"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (5195.0 [based on 1 runs with cutoff 60.0]) with flip 15

          
============= Performing 2 bonus runs of state: c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (5195.0 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 2 bonus runs: c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (3068.3333333333335 [based on 3 runs with cutoff 60.0])

    Changing ["c2: 2.15->2.025"], evaluating ...
275/100000000, 5584.043923999996/10800.0
        -> worse: (28305.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
278/100000000, 5620.569078999995/10800.0
        -> worse: (133344798.66666667 [based on 3 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
279/100000000, 5680.569078999995/10800.0
        -> worse: (327504.0009164027 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2"], evaluating ...
280/100000000, 5740.569078999995/10800.0
        -> worse: (296930.000910405 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.1"], evaluating ...
        -> worse: (7310.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.075"], evaluating ...
284/100000000, 5750.915813999995/10800.0
        -> worse: (14045.0 [based on 3 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
285/100000000, 5769.397309999996/10800.0
        -> worse: (95380.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2"], evaluating ...
        -> worse: (7780.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.125"], evaluating ...
        -> worse: (8100.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
288/100000000, 5834.920810999996/10800.0
        -> worse: (287250.0009126953 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.2"], evaluating ...
289/100000000, 5894.920810999996/10800.0
        -> worse: (296580.00091518223 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.05"], evaluating ...
290/100000000, 5906.878460999997/10800.0
        -> worse: (52935.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.0"], evaluating ...
291/100000000, 5917.607624999997/10800.0
        -> worse: (48445.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
292/100000000, 5932.222073999997/10800.0
        -> worse: (65875.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
293/100000000, 5992.222073999997/10800.0
        -> worse: (310193.00091514556 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
294/100000000, 6052.222073999997/10800.0
        -> worse: (293615.0009166621 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->0.5"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
295/100000000, 6112.222073999997/10800.0
        -> worse: (285800.000910865 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
296/100000000, 6172.222073999997/10800.0
        -> worse: (261500.00092205606 [based on 1 runs with cutoff 60.0])
          
============= Performing 19 bonus runs of state: c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (3068.3333333333335 [based on 3 runs with cutoff 60.0]) ============ 

298/100000000, 6215.866707999997/10800.0
300/100000000, 6244.064720999996/10800.0
305/100000000, 6254.494033999997/10800.0
306/100000000, 6298.211322999997/10800.0
308/100000000, 6340.628035999997/10800.0
309/100000000, 6400.628035999997/10800.0
313/100000000, 6449.778869999997/10800.0
          -> After 19 bonus runs for LM: c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (72758687.45458688 [based on 22 runs with cutoff 60.0])

   LM for iteration 5: c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (72758687.45458688 [based on 22 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 5): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 5): c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 84234421.78949766, based on 38 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (72758687.45458688 [based on 22 runs with cutoff 60.0])
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.075 c2=2.15 iter=5 rad=2 step=0.8 (72758687.45458688 [based on 22 runs with cutoff 60.0]), going back to c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0])
315/100000000, 6452.426433999997/10800.0
iteration 6, flip 17, evaluation count 315
    perturb to ---> c1=2.05 c2=2.1 iter=5 rad=2 step=1.0 (2275.0 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.05 c2=2 iter=5 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.05 c2=2.075 iter=5 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
316/100000000, 6512.426433999997/10800.0
   BLS in iteration 6, start with c1=2.05 c2=2.075 iter=5 rad=2 step=1.0 (294275.0009168617 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
          -> Take improving step to neighbour c1=2.05 c2=2.075 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 5 runs with cutoff 60.0]) with flip 17

          
============= Performing 1 bonus runs of state: c1=2.05 c2=2.075 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 5 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.05 c2=2.075 iter=5 rad=2 step=0.5 (["pruned", 1] [based on 6 runs with cutoff 60.0])

    Changing ["c2: 2.075->2.1"], evaluating ...
320/100000000, 6560.389412999997/10800.0
          -> Take improving step to neighbour c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0]) with flip 18

          
============= Performing 1 bonus runs of state: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (84234421.78949766 [based on 38 runs with cutoff 60.0]) ============ 

 Same incumbent, new precision:
New Incumbent: 6568.892799999997, 82075502.38463876 [39, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
          -> After 1 bonus runs: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (82075502.38463876 [based on 39 runs with cutoff 60.0])

    Changing ["rad: 2->1"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.15"], evaluating ...
        -> worse: (["pruned", 13] [based on 15 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.1"], evaluating ...
        -> worse: (["pruned", 1] [based on 5 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.15"], evaluating ...
        -> worse: (["pruned", 1] [based on 6 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (3220.5 [based on 2 runs with cutoff 60.0])
    Changing ["step: 0.5->1.2"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.075"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
323/100000000, 6571.738494999997/10800.0
        -> worse: (2685.0 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.025"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.125"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.05"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.125"], evaluating ...
        -> worse: (["pruned", 3] [based on 4 runs with cutoff 60.0])
    Changing ["c1: 2.05->2"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.1->2"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.025"], evaluating ...
        -> worse: (["pruned", 1] [based on 2 runs with cutoff 60.0])
          
============= Performing 19 bonus runs of state: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (82075502.38463876 [based on 39 runs with cutoff 60.0]) ============ 

 Same incumbent, new precision:
New Incumbent: 6574.032852999997, 80023877.20002279 [40, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6575.403126999997, 78072122.87807101 [41, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
326/100000000, 6617.0817899999965/10800.0
 Same incumbent, new precision:
New Incumbent: 6617.0817899999965, 85737310.45240265 [42, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6618.488373999997, 83743475.32560259 [43, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6620.857071999997, 81840458.04547526 [44, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
329/100000000, 6662.643067999997/10800.0
 Same incumbent, new precision:
New Incumbent: 6662.643067999997, 88910892.33335358 [45, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
330/100000000, 6704.721200999997/10800.0
 Same incumbent, new precision:
New Incumbent: 6704.721200999997, 95673699.04349808 [46, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
331/100000000, 6764.721200999997/10800.0
 Same incumbent, new precision:
New Incumbent: 6764.721200999997, 93644209.17025167 [47, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
332/100000000, 6776.493741999997/10800.0
 Same incumbent, new precision:
New Incumbent: 6776.493741999997, 91695574.81253809 [48, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
333/100000000, 6819.9894369999965/10800.0
 Same incumbent, new precision:
New Incumbent: 6819.9894369999965, 97987603.91840465 [49, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6822.369431999997, 96027970.64003657 [50, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6823.893922999997, 94145136.41180055 [51, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6825.300131999997, 92334691.096189 [52, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6827.086973999997, 90592642.96229865 [53, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6828.993309999997, 88915125.03707089 [54, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
339/100000000, 6830.303347999997/10800.0
 Same incumbent, new precision:
New Incumbent: 6830.303347999997, 87298516.30912414 [55, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
340/100000000, 6871.655324999997/10800.0
 Same incumbent, new precision:
New Incumbent: 6871.655324999997, 92882649.96431836 [56, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
 Same incumbent, new precision:
New Incumbent: 6878.181636999997, 91253589.70178646 [57, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
342/100000000, 6919.6949529999965/10800.0
 Same incumbent, new precision:
New Incumbent: 6919.6949529999965, 96576803.68968669 [58, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
          -> After 19 bonus runs for LM: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (96576803.68968669 [based on 58 runs with cutoff 60.0])

   LM for iteration 6: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (96576803.68968669 [based on 58 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 6): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 6): c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 96576803.68968669, based on 58 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (96576803.68968669 [based on 58 runs with cutoff 60.0])
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (96576803.68968669 [based on 58 runs with cutoff 60.0])
LM better, change incumbent
New Incumbent: 6919.6949529999965, 96576803.68968669 [58, 60.0]. With state c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
same state as last ILS: c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (96576803.68968669 [based on 58 runs with cutoff 60.0])
342/100000000, 6919.6949529999965/10800.0
iteration 7, flip 20, evaluation count 342
    perturb to ---> c1=2.05 c2=2.1 iter=5 rad=2 step=0.8 (["pruned", 1] [based on 2 runs with cutoff 60.0])
    perturb to ---> c1=2.05 c2=2.1 iter=5 rad=1 step=0.8 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2 c2=2.1 iter=5 rad=1 step=0.8 (100000000 [based on 0 runs with cutoff 0])
   BLS in iteration 7, start with c1=2 c2=2.1 iter=5 rad=1 step=0.8 (3460.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (40370.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->0.5"], evaluating ...
345/100000000, 6942.482067999997/10800.0
        -> worse: (65905.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.075"], evaluating ...
346/100000000, 6959.267561999996/10800.0
        -> worse: (85810.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2->2.1"], evaluating ...
347/100000000, 7019.267561999996/10800.0
        -> worse: (322315.0009214189 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.15"], evaluating ...
        -> worse: (40200.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
349/100000000, 7030.145891999996/10800.0
        -> worse: (5175.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2->2.125"], evaluating ...
350/100000000, 7090.145891999996/10800.0
        -> worse: (320980.00091034675 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
351/100000000, 7136.622516999996/10800.0
        -> worse: (278766.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2->2.025"], evaluating ...
        -> worse: (35755.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.05"], evaluating ...
353/100000000, 7152.525240999996/10800.0
        -> worse: (39030.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.2"], evaluating ...
354/100000000, 7212.525240999996/10800.0
        -> worse: (322110.0009128693 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2->2.15"], evaluating ...
          -> Take improving step to neighbour c1=2.15 c2=2.1 iter=5 rad=1 step=0.8 (2370.0 [based on 1 runs with cutoff 60.0]) with flip 20

          
============= Performing 12 bonus runs of state: c1=2.15 c2=2.1 iter=5 rad=1 step=0.8 (2370.0 [based on 1 runs with cutoff 60.0]) ============ 

357/100000000, 7247.986581999996/10800.0
359/100000000, 7283.635266999996/10800.0
360/100000000, 7321.914049999996/10800.0
361/100000000, 7355.9627859999955/10800.0
365/100000000, 7366.999464999996/10800.0
367/100000000, 7401.738768999997/10800.0
          -> After 12 bonus runs: c1=2.15 c2=2.1 iter=5 rad=1 step=0.8 (153857318.84615386 [based on 13 runs with cutoff 60.0])

    Changing ["step: 0.8->1.2"], evaluating ...
368/100000000, 7417.031126999997/10800.0
        -> worse: (79815.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->0.5"], evaluating ...
369/100000000, 7452.554688999997/10800.0
        -> worse: (189095.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.125"], evaluating ...
        -> worse: (44645.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.025"], evaluating ...
371/100000000, 7463.091173999997/10800.0
375/100000000, 7480.001403999997/10800.0
377/100000000, 7516.679044999997/10800.0
383/100000000, 7536.207328999996/10800.0
          -> Take improving step to neighbour c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (30793999.307692308 [based on 13 runs with cutoff 60.0]) with flip 21

          
============= Performing 4 bonus runs of state: c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (30793999.307692308 [based on 13 runs with cutoff 60.0]) ============ 

385/100000000, 7572.178449999996/10800.0
          -> After 4 bonus runs: c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (47081570.4117647 [based on 17 runs with cutoff 60.0])

    Changing ["step: 0.8->0.5"], evaluating ...
        -> worse: (2605.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.1"], evaluating ...
389/100000000, 7584.301455999995/10800.0
        -> worse: (6880.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.075"], evaluating ...
390/100000000, 7600.529984999995/10800.0
        -> worse: (84190.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
391/100000000, 7634.577319999995/10800.0
        -> worse: (153800.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.0"], evaluating ...
392/100000000, 7694.577319999995/10800.0
        -> worse: (320105.0009120061 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
        -> worse: (1245.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2"], evaluating ...
394/100000000, 7756.012217999995/10800.0
        -> worse: (329345.00091544574 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.075"], evaluating ...
395/100000000, 7783.7012499999955/10800.0
        -> worse: (148180.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.125"], evaluating ...
        -> worse: (18005.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
397/100000000, 7845.144292999995/10800.0
        -> worse: (322495.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (11550.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.2"], evaluating ...
        -> worse: (13345.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.15"], evaluating ...
400/100000000, 7911.834927999995/10800.0
        -> worse: (323385.0009156187 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.025"], evaluating ...
        -> worse: (30610.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
402/100000000, 7935.449974999994/10800.0
        -> worse: (89009.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.05"], evaluating ...
        -> worse: (10695.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2"], evaluating ...
404/100000000, 7998.615831999994/10800.0
        -> worse: (313360.00091612915 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
405/100000000, 8018.263506999994/10800.0
        -> worse: (99805.0 [based on 1 runs with cutoff 60.0])
          
============= Performing 18 bonus runs of state: c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (47081570.4117647 [based on 17 runs with cutoff 60.0]) ============ 

410/100000000, 8028.617085999994/10800.0
411/100000000, 8062.355484999994/10800.0
412/100000000, 8095.150470999994/10800.0
414/100000000, 8117.7287489999935/10800.0
417/100000000, 8153.791199999993/10800.0
419/100000000, 8215.028124999993/10800.0
421/100000000, 8250.196061999994/10800.0
          -> After 18 bonus runs for LM: c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (68601410.8857403 [based on 35 runs with cutoff 60.0])

   LM for iteration 7: c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (68601410.8857403 [based on 35 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 7): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 7): c1=2.05, c2=2.1, iter=5, rad=2, step=0.5
==================================================================
Training quality of this incumbent parameter configuration: 96576803.68968669, based on 58 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (68601410.8857403 [based on 35 runs with cutoff 60.0])
c1=2.05 c2=2.1 iter=5 rad=2 step=0.5 (96576803.68968669 [based on 58 runs with cutoff 60.0])
426/100000000, 8262.887751999993/10800.0
430/100000000, 8303.919424999993/10800.0
434/100000000, 8342.468939999993/10800.0
435/100000000, 8402.468939999993/10800.0
437/100000000, 8437.788233999992/10800.0
438/100000000, 8487.565472999991/10800.0
444/100000000, 8529.973786999992/10800.0
445/100000000, 8589.738535999992/10800.0
New inc: 69002550.86210045
New Incumbent: 8591.437968999991, 69002550.86210045 [58, 60.0]. With state c1=2.15, c2=2.025, iter=5, rad=1, step=0.8
LM better, change incumbent
New Incumbent: 8591.437968999991, 69002550.86210045 [58, 60.0]. With state c1=2.15, c2=2.025, iter=5, rad=1, step=0.8
   Accepting new better local optimum: c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (69002550.86210045 [based on 58 runs with cutoff 60.0])
446/100000000, 8591.437968999991/10800.0
iteration 8, flip 23, evaluation count 446
    perturb to ---> c1=2.125 c2=2.025 iter=5 rad=1 step=0.8 (18005.0 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.125 c2=2.025 iter=10 rad=1 step=0.8 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.125 c2=2.025 iter=10 rad=1 step=0.5 (100000000 [based on 0 runs with cutoff 0])
447/100000000, 8651.437968999991/10800.0
   BLS in iteration 8, start with c1=2.125 c2=2.025 iter=10 rad=1 step=0.5 (342155.00091173645 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.025"], evaluating ...
448/100000000, 8664.171584999991/10800.0
          -> Take improving step to neighbour c1=2.025 c2=2.025 iter=10 rad=1 step=0.5 (67695.0 [based on 1 runs with cutoff 60.0]) with flip 23

          
============= Performing 1 bonus runs of state: c1=2.025 c2=2.025 iter=10 rad=1 step=0.5 (67695.0 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.025 c2=2.025 iter=10 rad=1 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0])

    Changing ["c1: 2.025->2.05"], evaluating ...
449/100000000, 8675.179528999992/10800.0
          -> Take improving step to neighbour c1=2.05 c2=2.025 iter=10 rad=1 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0]) with flip 24

          
============= Performing 1 bonus runs of state: c1=2.05 c2=2.025 iter=10 rad=1 step=0.5 (["pruned", 1] [based on 2 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.05 c2=2.025 iter=10 rad=1 step=0.5 (["pruned", 1] [based on 3 runs with cutoff 60.0])

    Changing ["c1: 2.05->2.075"], evaluating ...
452/100000000, 8687.302723999992/10800.0
          -> Take improving step to neighbour c1=2.075 c2=2.025 iter=10 rad=1 step=0.5 (33315.0 [based on 3 runs with cutoff 60.0]) with flip 25

          
============= Performing 1 bonus runs of state: c1=2.075 c2=2.025 iter=10 rad=1 step=0.5 (33315.0 [based on 3 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.075 c2=2.025 iter=10 rad=1 step=0.5 (["pruned", 3] [based on 4 runs with cutoff 60.0])

    Changing ["step: 0.5->1.2"], evaluating ...
453/100000000, 8698.563461999993/10800.0
        -> worse: (58235.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->8"], evaluating ...
456/100000000, 8731.799931999993/10800.0
        -> worse: (133343441.66666667 [based on 3 runs with cutoff 60.0])
    Changing ["iter: 10->12"], evaluating ...
457/100000000, 8752.548104999993/10800.0
        -> worse: (117021.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
458/100000000, 8812.548104999993/10800.0
        -> worse: (299590.0009107085 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
461/100000000, 8831.845071999991/10800.0
        -> worse: (58756.666666666664 [based on 3 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
462/100000000, 8843.06542599999/10800.0
        -> worse: (59630.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.15"], evaluating ...
463/100000000, 8864.06950599999/10800.0
        -> worse: (115875.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.125"], evaluating ...
        -> worse: (32995.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
465/100000000, 8929.75969299999/10800.0
        -> worse: (334035.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2"], evaluating ...
466/100000000, 8989.75969299999/10800.0
        -> worse: (334915.0009219088 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2"], evaluating ...
467/100000000, 9005.42959499999/10800.0
        -> worse: (80815.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->5"], evaluating ...
468/100000000, 9065.42959499999/10800.0
        -> worse: (324020.0009120795 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.075"], evaluating ...
469/100000000, 9095.603916999991/10800.0
        -> worse: (171530.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.1"], evaluating ...
        -> worse: (25995.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
471/100000000, 9139.45057199999/10800.0
        -> worse: (222565.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.05"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (6273.75 [based on 4 runs with cutoff 60.0]) with flip 26

          
============= Performing 16 bonus runs of state: c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (6273.75 [based on 4 runs with cutoff 60.0]) ============ 

476/100000000, 9175.96708399999/10800.0
478/100000000, 9206.738974999991/10800.0
482/100000000, 9218.045010999991/10800.0
484/100000000, 9234.607754999992/10800.0
486/100000000, 9265.650508999992/10800.0
490/100000000, 9333.32061799999/10800.0
          -> After 16 bonus runs: c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (60038115.65004562 [based on 20 runs with cutoff 60.0])

    Changing ["c1: 2.075->2"], evaluating ...
492/100000000, 9344.35655299999/10800.0
        -> worse: (45380.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
        -> worse: (10565.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
496/100000000, 9361.37714699999/10800.0
        -> worse: (35690.0 [based on 3 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
        -> worse: (28120.0 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
498/100000000, 9388.98815099999/10800.0
        -> worse: (111345.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->5"], evaluating ...
499/100000000, 9448.98815099999/10800.0
        -> worse: (321425.00091304234 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
500/100000000, 9464.91117699999/10800.0
        -> worse: (88275.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.025"], evaluating ...
501/100000000, 9524.91117699999/10800.0
        -> worse: (357915.00091127947 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
502/100000000, 9584.91117699999/10800.0
        -> worse: (353835.00091131584 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
503/100000000, 9644.91117699999/10800.0
        -> worse: (344895.00091280194 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
504/100000000, 9679.56104199999/10800.0
        -> worse: (198010.0 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->1.2"], evaluating ...
505/100000000, 9739.56104199999/10800.0
        -> worse: (354850.00091277895 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->8"], evaluating ...
506/100000000, 9759.71419799999/10800.0
        -> worse: (109910.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->12"], evaluating ...
507/100000000, 9786.094346999991/10800.0
        -> worse: (151431.0 [based on 1 runs with cutoff 60.0])
          
============= Performing 14 bonus runs of state: c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (60038115.65004562 [based on 20 runs with cutoff 60.0]) ============ 

510/100000000, 9817.93218599999/10800.0
511/100000000, 9847.02916499999/10800.0
514/100000000, 9862.907956999992/10800.0
516/100000000, 9893.784156999991/10800.0
518/100000000, 9955.10365099999/10800.0
520/100000000, 9985.60754599999/10800.0
          -> After 14 bonus runs for LM: c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (82392390.05887714 [based on 34 runs with cutoff 60.0])

   LM for iteration 8: c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (82392390.05887714 [based on 34 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 8): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 8): c1=2.15, c2=2.025, iter=5, rad=1, step=0.8
==================================================================
Training quality of this incumbent parameter configuration: 69002550.86210045, based on 58 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (82392390.05887714 [based on 34 runs with cutoff 60.0])
c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (69002550.86210045 [based on 58 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.075 c2=2.05 iter=10 rad=1 step=0.5 (82392390.05887714 [based on 34 runs with cutoff 60.0]), going back to c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (69002550.86210045 [based on 58 runs with cutoff 60.0])
521/100000000, 9987.06461099999/10800.0
iteration 9, flip 28, evaluation count 521
    perturb to ---> c1=2.15 c2=2.05 iter=5 rad=1 step=0.8 (10695.0 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.15 c2=2.125 iter=5 rad=1 step=0.8 (44645.0 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.15 c2=2.125 iter=8 rad=1 step=0.8 (100000000 [based on 0 runs with cutoff 0])
522/100000000, 10047.06461099999/10800.0
   BLS in iteration 9, start with c1=2.15 c2=2.125 iter=8 rad=1 step=0.8 (337767.0009127892 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2"], evaluating ...
523/100000000, 10107.06461099999/10800.0
        -> worse: (339366.0009111164 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
524/100000000, 10167.06461099999/10800.0
        -> worse: (344972.00091432425 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.2"], evaluating ...
525/100000000, 10227.06461099999/10800.0
          -> Take improving step to neighbour c1=2.15 c2=2.125 iter=8 rad=1 step=1.2 (330118.00091549894 [based on 1 runs with cutoff 60.0]) with flip 28

          
============= Performing 3 bonus runs of state: c1=2.15 c2=2.125 iter=8 rad=1 step=1.2 (330118.00091549894 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 3 bonus runs: c1=2.15 c2=2.125 iter=8 rad=1 step=1.2 (["pruned", 1] [based on 4 runs with cutoff 60.0])

    Changing ["step: 1.2->0.5"], evaluating ...
          -> Take improving step to neighbour c1=2.15 c2=2.125 iter=8 rad=1 step=0.5 (["pruned", 3] [based on 4 runs with cutoff 60.0]) with flip 29

          
============= Performing 1 bonus runs of state: c1=2.15 c2=2.125 iter=8 rad=1 step=0.5 (["pruned", 3] [based on 4 runs with cutoff 60.0]) ============ 

529/100000000, 10237.860784999992/10800.0
530/100000000, 10268.552438999992/10800.0
          -> After 1 bonus runs: c1=2.15 c2=2.125 iter=8 rad=1 step=0.5 (80012545.6 [based on 5 runs with cutoff 60.0])

    Changing ["rad: 1->3"], evaluating ...
531/100000000, 10311.222849999991/10800.0
        -> worse: (["pruned", 3] [based on 5 runs with cutoff 60.0])
    Changing ["step: 0.5->1.0"], evaluating ...
534/100000000, 10321.693367999991/10800.0
536/100000000, 10333.782568999992/10800.0
          -> Take improving step to neighbour c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (42802.4 [based on 5 runs with cutoff 60.0]) with flip 30

          
============= Performing 2 bonus runs of state: c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (42802.4 [based on 5 runs with cutoff 60.0]) ============ 

537/100000000, 10346.396854999992/10800.0
538/100000000, 10374.841426999992/10800.0
          -> After 2 bonus runs: c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (102232.14285714286 [based on 7 runs with cutoff 60.0])

    Changing ["iter: 8->5"], evaluating ...
542/100000000, 10384.964121999994/10800.0
543/100000000, 10419.730751999994/10800.0
        -> worse: (80018373.2 [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.1"], evaluating ...
548/100000000, 10457.346942999993/10800.0
        -> worse: (80004215.2 [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.075"], evaluating ...
553/100000000, 10494.984030999995/10800.0
        -> worse: (80006300.6 [based on 5 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.1"], evaluating ...
554/100000000, 10554.984030999995/10800.0
        -> worse: (348173.00091221667 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->10"], evaluating ...
        -> worse: (43370.0 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->12"], evaluating ...
556/100000000, 10597.716923999995/10800.0
        -> worse: (202050.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2"], evaluating ...
557/100000000, 10657.716923999995/10800.0
        -> worse: (345688.000910429 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
558/100000000, 10717.716923999995/10800.0
        -> worse: (343494.0009102228 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
559/100000000, 10743.882329999995/10800.0
        -> worse: (148535.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.025"], evaluating ...
560/100000000, 10773.269282999994/10800.0
        -> worse: (161434.0 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2"], evaluating ...
561/100000000, 10783.328190999995/10800.0
        -> worse: (50715.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
        -> worse: (10902.0 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
567/100000000, 10808.496157999996/10800.0
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
        -> worse: (41773.6 [based on 5 runs with cutoff 60.0])
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
          
============= Performing 13 bonus runs of state: c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (102232.14285714286 [based on 7 runs with cutoff 60.0]) ============ 

ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
          -> After 13 bonus runs for LM: c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (102232.14285714286 [based on 7 runs with cutoff 60.0])

   LM for iteration 9: c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (102232.14285714286 [based on 7 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 9): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 9): c1=2.15, c2=2.025, iter=5, rad=1, step=0.8
==================================================================
Training quality of this incumbent parameter configuration: 69002550.86210045, based on 58 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (102232.14285714286 [based on 7 runs with cutoff 60.0])
c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (69002550.86210045 [based on 58 runs with cutoff 60.0])
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
572/100000000, 10818.744719999997/10800.0
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
573/100000000, 10849.373877999997/10800.0
Incumbent better, keeping it
rejecting worse c1=2.15 c2=2.125 iter=8 rad=1 step=1.0 (30830510.615384616 [based on 13 runs with cutoff 60.0]), going back to c1=2.15 c2=2.025 iter=5 rad=1 step=0.8 (69002550.86210045 [based on 58 runs with cutoff 60.0])
ParamILS has reached the specified CPU time limit of 10800.0 seconds => stopping the search now.
Final solution for depth 1 with limit N=2000, and cutoff time=60.0.
New Incumbent: 10849.373877999997, 69002550.86210045 [58, 60.0]. With state c1=2.15, c2=2.025, iter=5, rad=1, step=0.8

==================================================================
ParamILS is finished.
==================================================================

Final best parameter configuration found: c1=2.15, c2=2.025, iter=5, rad=1, step=0.8
==================================================================
Active parameters: c1=2.15, c2=2.025, iter=5, rad=1, step=0.8

==================================================================
Training quality of this final best found parameter configuration: 69002550.86210045, based on 58 runs with cutoff 60.0
==================================================================


==================================================================
Computing validation result on independent data -- 1 runs with cutoff time 60.0...
==================================================================
SchwefelS3: 2570
Combined result: 2570.0

================================================================
Final best parameter configuration: c1=2.15, c2=2.025, iter=5, rad=1, step=0.8
==================================================================
Active parameters: c1=2.15, c2=2.025, iter=5, rad=1, step=0.8

================================================================
Training quality of this final best found parameter configuration: 69002550.86210045, based on 58 runs with cutoff 60.0
Test quality of this final best found parameter configuration: 2570.0, based on 1 independent runs with cutoff 60.0
==================================================================
