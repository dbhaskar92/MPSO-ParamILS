Call: /usr/bin/ruby ../scripts/param_ils_2_3_run.rb "-numRun" "1" "-scenariofile" "MPSO_scenario_run1.txt" "-validN" "100" "-pruning" "0"


seed: 2468
algo: python mpso_wrapper_run1.py
tunerTimeout (CPU time): 18000.0
maxWallTime: 8640000.0
maxEvals: 100000000
run_obj: runtime
overall_obj: mean10
instance_file: mpso-instances.txt
test_instance_file: mpso-test-instances.txt
N: 2000
cutoff_time: 60.0
cutoff_length: 2147483647
R: 10
pertubation_strength_basic: 
pertubation_strength_scaling: false
p_restart: 0.01
Run 2
Level 
========================================================
Starting ILS for level 1, i.e. a limit of N=2000, and cutoff time=60.0.
Current CPU time = 0, this run goes until 18000.0 
========================================================
New Incumbent: 0, 100000000 [0, 0]. With state c1=2.05, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 2.367296, 2.367296 [1, 60.0]. With state c1=2.05, c2=2.05, iter=5, rad=1, step=1.0
        -> Worse random: c1=2.0 c2=2.05 iter=12 rad=3 step=0.5 (5.954058 [based on 1 runs with cutoff 60.0])
3/100000000, 11.915132999999999/18000.0
        -> Worse random: c1=2.15 c2=2.15 iter=12 rad=1 step=1.0 (3.593779 [based on 1 runs with cutoff 60.0])
4/100000000, 71.91513300000001/18000.0
        -> Worse random: c1=2.0 c2=2.0 iter=10 rad=2 step=1.0 (600.0092210711001 [based on 1 runs with cutoff 60.0])
        -> Worse random: c1=2.1 c2=2.05 iter=12 rad=1 step=0.5 (4.143302 [based on 1 runs with cutoff 60.0])
6/100000000, 136.05843500000003/18000.0
        -> Worse random: c1=2.05 c2=2.15 iter=5 rad=3 step=1.0 (600.0092534909002 [based on 1 runs with cutoff 60.0])
7/100000000, 160.89317300000005/18000.0
        -> Worse random: c1=2.05 c2=2.075 iter=8 rad=1 step=0.8 (24.834738 [based on 1 runs with cutoff 60.0])
8/100000000, 220.89317300000005/18000.0
        -> Worse random: c1=2.05 c2=1.975 iter=12 rad=1 step=1.0 (600.0093002927001 [based on 1 runs with cutoff 60.0])
9/100000000, 241.56636100000006/18000.0
        -> Worse random: c1=1.975 c2=2.125 iter=12 rad=3 step=1.0 (20.673188 [based on 1 runs with cutoff 60.0])
10/100000000, 301.5663610000001/18000.0
        -> Worse random: c1=2.0 c2=2.0 iter=3 rad=2 step=1.2 (600.0093310484001 [based on 1 runs with cutoff 60.0])
11/100000000, 323.5661820000001/18000.0
        -> Worse random: c1=2.125 c2=1.950 iter=12 rad=2 step=0.8 (21.999821 [based on 1 runs with cutoff 60.0])
   BLS in iteration 1, start with c1=2.05 c2=2.05 iter=5 rad=1 step=1.0 (2.367296 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.15"], evaluating ...
        -> worse: (4.825115 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (3.140748 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.1"], evaluating ...
New inc: 1.747739
New Incumbent: 333.27978400000006, 1.747739 [1, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
          -> Take improving step to neighbour c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (1.747739 [based on 1 runs with cutoff 60.0]) with flip 1

          
============= Performing 3 bonus runs of state: c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (1.747739 [based on 1 runs with cutoff 60.0]) ============ 

15/100000000, 334.86969200000004/18000.0
 Same incumbent, new precision:
New Incumbent: 334.86969200000004, 1.6688235 [2, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 336.72812600000003, 1.7320269999999998 [3, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 338.34346700000003, 1.7028554999999999 [4, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
          -> After 3 bonus runs: c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (1.7028554999999999 [based on 4 runs with cutoff 60.0])

    Changing ["c2: 2.05->1.950"], evaluating ...
18/100000000, 347.72103400000003/18000.0
        -> worse: (9.377567 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.0"], evaluating ...
        -> worse: (8.546513 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
20/100000000, 358.515824/18000.0
        -> worse: (2.248277 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.15"], evaluating ...
        -> worse: (7.679788 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->1.950"], evaluating ...
22/100000000, 426.195612/18000.0
        -> worse: (600.0093093006001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
23/100000000, 486.195612/18000.0
        -> worse: (600.0092075448001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
24/100000000, 501.99271899999997/18000.0
        -> worse: (15.797107 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
25/100000000, 561.992719/18000.0
        -> worse: (600.0092031249001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->1.975"], evaluating ...
26/100000000, 621.992719/18000.0
        -> worse: (600.0092775349001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.025"], evaluating ...
        -> worse: (9.908388 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.0"], evaluating ...
28/100000000, 691.9011069999999/18000.0
        -> worse: (600.0092442605002 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->1.975"], evaluating ...
        -> worse: (4.104543 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.075"], evaluating ...
30/100000000, 744.88068/18000.0
        -> worse: (48.87503 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
        -> worse: (6.326098 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
32/100000000, 811.206778/18000.0
        -> worse: (600.0092330519001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (4.843531 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.025"], evaluating ...
34/100000000, 824.19049/18000.0
        -> worse: (8.140181 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
        -> worse: (2.700214 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.125"], evaluating ...
37/100000000, 889.5909179999999/18000.0
        -> worse: (600.0092256918001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.1"], evaluating ...
38/100000000, 938.5579649999999/18000.0
        -> worse: (48.967047 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
39/100000000, 985.3546489999999/18000.0
        -> worse: (46.796684 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.15"], evaluating ...
40/100000000, 1045.3546489999999/18000.0
        -> worse: (600.0092035218001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.125"], evaluating ...
41/100000000, 1084.520664/18000.0
        -> worse: (39.166015 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.075"], evaluating ...
        -> worse: (3.014176 [based on 1 runs with cutoff 60.0])
          
============= Performing 24 bonus runs of state: c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (1.7028554999999999 [based on 4 runs with cutoff 60.0]) ============ 

 Same incumbent, new precision:
New Incumbent: 1089.6170529999997, 1.778727 [5, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1091.0672219999997, 1.7239673333333334 [6, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
45/100000000, 1151.0672219999997/18000.0
 Same incumbent, new precision:
New Incumbent: 1151.0672219999997, 87.19341485714287 [7, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
46/100000000, 1181.3561239999997/18000.0
 Same incumbent, new precision:
New Incumbent: 1181.3561239999997, 80.08035075000001 [8, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1183.0347269999997, 71.36904544444445 [9, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1186.3415359999997, 64.56282180000001 [10, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1188.4307149999997, 58.883399727272725 [11, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
50/100000000, 1248.4307149999997/18000.0
 Same incumbent, new precision:
New Incumbent: 1248.4307149999997, 103.97729141666667 [12, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1249.9358569999997, 96.0948183846154 [13, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
52/100000000, 1263.6239249999996/18000.0
 Same incumbent, new precision:
New Incumbent: 1263.6239249999996, 90.20862192857143 [14, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1265.2200249999996, 84.30112046666666 [15, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1270.7106559999995, 79.37546487499999 [16, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
55/100000000, 1330.7106559999995/18000.0
 Same incumbent, new precision:
New Incumbent: 1330.7106559999995, 110.00103164705882 [17, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
56/100000000, 1354.8745949999995/18000.0
 Same incumbent, new precision:
New Incumbent: 1354.8745949999995, 105.23230427777779 [18, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1356.4138149999994, 99.77477352631578 [19, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1361.7344039999994, 95.0520643 [20, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1363.2909259999994, 90.59989561904762 [21, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
60/100000000, 1368.8268549999993/18000.0
 Same incumbent, new precision:
New Incumbent: 1368.8268549999993, 86.73335168181818 [22, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
61/100000000, 1428.8268549999993/18000.0
 Same incumbent, new precision:
New Incumbent: 1428.8268549999993, 109.04929726086957 [23, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1431.0978929999994, 104.600203125 [24, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1432.7293409999995, 100.48145292 [25, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1434.6299499999996, 96.68988199999998 [26, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1435.8713509999995, 93.15475307407407 [27, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
 Same incumbent, new precision:
New Incumbent: 1437.4557219999995, 89.88438228571428 [28, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
          -> After 24 bonus runs for LM: c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (89.88438228571428 [based on 28 runs with cutoff 60.0])

   LM for iteration 1: c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (89.88438228571428 [based on 28 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 1): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 1): c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 89.88438228571428, based on 28 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (89.88438228571428 [based on 28 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (89.88438228571428 [based on 28 runs with cutoff 60.0])
LM better, change incumbent
New Incumbent: 1437.4557219999995, 89.88438228571428 [28, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
66/100000000, 1437.4557219999995/18000.0
iteration 2, flip 3, evaluation count 66
    perturb to ---> c1=2.1 c2=1.975 iter=5 rad=1 step=1.0 (4.104543 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.1 c2=1.975 iter=12 rad=1 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.075 c2=1.975 iter=12 rad=1 step=1.0 (100000000 [based on 0 runs with cutoff 0])
67/100000000, 1446.3525519999994/18000.0
   BLS in iteration 2, start with c1=2.075 c2=1.975 iter=12 rad=1 step=1.0 (8.89683 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->8"], evaluating ...
68/100000000, 1506.3525519999994/18000.0
        -> worse: (600.0092106276 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.0"], evaluating ...
69/100000000, 1566.3525519999994/18000.0
        -> worse: (600.0092565029 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=1.975 iter=12 rad=1 step=0.5 (4.531374 [based on 1 runs with cutoff 60.0]) with flip 3

          
============= Performing 3 bonus runs of state: c1=2.075 c2=1.975 iter=12 rad=1 step=0.5 (4.531374 [based on 1 runs with cutoff 60.0]) ============ 

71/100000000, 1577.6595689999992/18000.0
          -> After 3 bonus runs: c1=2.075 c2=1.975 iter=12 rad=1 step=0.5 (5.009545749999999 [based on 4 runs with cutoff 60.0])

    Changing ["iter: 12->5"], evaluating ...
74/100000000, 1595.8121429999992/18000.0
        -> worse: (9.421408 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->8"], evaluating ...
75/100000000, 1620.9466809999992/18000.0
        -> worse: (25.134538 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
76/100000000, 1634.6098849999992/18000.0
        -> worse: (13.663204 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 1.975->2.15"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=2.15 iter=12 rad=1 step=0.5 (1.7670267500000003 [based on 4 runs with cutoff 60.0]) with flip 4

          
============= Performing 4 bonus runs of state: c1=2.075 c2=2.15 iter=12 rad=1 step=0.5 (1.7670267500000003 [based on 4 runs with cutoff 60.0]) ============ 

82/100000000, 1645.4264269999994/18000.0
83/100000000, 1705.4264269999994/18000.0
84/100000000, 1765.4264269999994/18000.0
          -> After 4 bonus runs: c1=2.075 c2=2.15 iter=12 rad=1 step=0.5 (151.35334275000002 [based on 8 runs with cutoff 60.0])

    Changing ["iter: 12->3"], evaluating ...
        -> worse: (9.934341 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.0"], evaluating ...
86/100000000, 1778.3106589999993/18000.0
        -> worse: (2.949891 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
        -> worse: (1.8823400000000001 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.975"], evaluating ...
89/100000000, 1801.2076219999992/18000.0
        -> worse: (19.132283 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->10"], evaluating ...
90/100000000, 1860.950009999999/18000.0
        -> worse: (59.742388 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.5->0.8"], evaluating ...
97/100000000, 1930.7250249999993/18000.0
98/100000000, 1990.7250249999993/18000.0
          -> Take improving step to neighbour c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (151.22315187500004 [based on 8 runs with cutoff 60.0]) with flip 5

          
============= Performing 6 bonus runs of state: c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (151.22315187500004 [based on 8 runs with cutoff 60.0]) ============ 

102/100000000, 2057.5795109999995/18000.0
104/100000000, 2118.9436819999996/18000.0
          -> After 6 bonus runs: c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (172.7152908571429 [based on 14 runs with cutoff 60.0])

    Changing ["c2: 2.15->2.075"], evaluating ...
105/100000000, 2130.286061/18000.0
        -> worse: (11.342379 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
        -> worse: (2.663292 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.2"], evaluating ...
        -> worse: (1.497817 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->10"], evaluating ...
108/100000000, 2194.44717/18000.0
        -> worse: (600.0092049852001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.975"], evaluating ...
        -> worse: (3.294438 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->5"], evaluating ...
110/100000000, 2223.897318/18000.0
        -> worse: (26.15571 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.125"], evaluating ...
        -> worse: (2.146524 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
112/100000000, 2286.043842/18000.0
        -> worse: (600.0092057490001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.0"], evaluating ...
        -> worse: (4.513217 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.05"], evaluating ...
        -> worse: (2.614627 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->1.975"], evaluating ...
115/100000000, 2298.544218/18000.0
        -> worse: (5.372532 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.1"], evaluating ...
        -> worse: (4.361705 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->8"], evaluating ...
117/100000000, 2362.905923/18000.0
        -> worse: (600.0092162722001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->3"], evaluating ...
118/100000000, 2422.905923/18000.0
        -> worse: (600.0092301415001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
119/100000000, 2433.859837/18000.0
        -> worse: (10.953914 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
        -> worse: (1.743892 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.025"], evaluating ...
        -> worse: (5.995869 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.025"], evaluating ...
122/100000000, 2501.599598/18000.0
        -> worse: (600.0092064910001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
        -> worse: (2.040455 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
124/100000000, 2563.6400529999996/18000.0
        -> worse: (600.0092024128002 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->1.950"], evaluating ...
125/100000000, 2623.6400529999996/18000.0
        -> worse: (600.0092444063001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.0"], evaluating ...
        -> worse: (1.881874 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.0"], evaluating ...
127/100000000, 2636.453858/18000.0
        -> worse: (10.931931 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.950"], evaluating ...
        -> worse: (6.632798 [based on 1 runs with cutoff 60.0])
          
============= Performing 24 bonus runs of state: c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (172.7152908571429 [based on 14 runs with cutoff 60.0]) ============ 

130/100000000, 2687.327602/18000.0
131/100000000, 2721.789977/18000.0
132/100000000, 2781.789977/18000.0
134/100000000, 2793.127153/18000.0
137/100000000, 2826.1789280000003/18000.0
140/100000000, 2887.481275/18000.0
State wants more detail (28+1) than incumbent (28), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (114.50295052539289 [based on 28 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (89.88438228571428 [based on 28 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 2893.8816860000006, 86.8792555862069 [29, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
144/100000000, 2953.8816860000006/18000.0
State wants more detail (29+1) than incumbent (29), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (131.2445466814173 [based on 29 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (86.8792555862069 [based on 29 runs with cutoff 60.0])
145/100000000, 3013.8816860000006/18000.0
 Same incumbent, new precision:
New Incumbent: 3013.8816860000006, 103.98361706666667 [30, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
146/100000000, 3073.8816860000006/18000.0
State wants more detail (30+1) than incumbent (30), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (146.87006512537008 [based on 30 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (103.98361706666667 [based on 30 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3075.4205470000006, 100.67894751612903 [31, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
State wants more detail (31+1) than incumbent (31), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (142.18038760519684 [based on 31 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (100.67894751612903 [based on 31 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3078.9246520000006, 97.59566925 [32, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
State wants more detail (32+1) than incumbent (32), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (137.79336936753444 [based on 32 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (97.59566925 [based on 32 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3082.4253820000004, 94.68988915151515 [33, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
152/100000000, 3084.0796600000003/18000.0
State wants more detail (33+1) than incumbent (33), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (133.66794235639702 [based on 33 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (94.68988915151515 [based on 33 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3085.636182, 91.95067247058823 [34, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
State wants more detail (34+1) than incumbent (34), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (129.7820950812089 [based on 34 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (91.95067247058823 [based on 34 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3089.1044180000004, 89.37834185714284 [35, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
State wants more detail (35+1) than incumbent (35), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (126.12535796460293 [based on 35 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (89.37834185714284 [based on 35 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3092.6501690000005, 86.9442061111111 [36, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
158/100000000, 3094.9825840000003/18000.0
State wants more detail (36+1) than incumbent (36), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (122.68666510447507 [based on 36 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (86.9442061111111 [based on 36 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3096.5129210000005, 84.63572316216217 [37, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
State wants more detail (37+1) than incumbent (37), doing incumbent first:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (119.41006569624601 [based on 37 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (84.63572316216217 [based on 37 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 3100.5787730000006, 82.47724005263159 [38, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
          -> After 24 bonus runs for LM: c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (116.33606212529216 [based on 38 runs with cutoff 60.0])

   LM for iteration 2: c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (116.33606212529216 [based on 38 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 2): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 2): c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 82.47724005263159, based on 38 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (116.33606212529216 [based on 38 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (82.47724005263159 [based on 38 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.075 c2=2.15 iter=12 rad=1 step=0.8 (116.33606212529216 [based on 38 runs with cutoff 60.0]), going back to c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (82.47724005263159 [based on 38 runs with cutoff 60.0])
162/100000000, 3103.1767030000005/18000.0
iteration 3, flip 7, evaluation count 162
    perturb to ---> c1=2.1 c2=2.025 iter=5 rad=1 step=1.0 (8.140181 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.125 c2=2.025 iter=5 rad=1 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=1.950 c2=2.025 iter=5 rad=1 step=1.0 (100000000 [based on 0 runs with cutoff 0])
163/100000000, 3163.1767030000005/18000.0
   BLS in iteration 3, start with c1=1.950 c2=2.025 iter=5 rad=1 step=1.0 (600.0092805611001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
164/100000000, 3223.1767030000005/18000.0
        -> worse: (600.0093163064001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.05"], evaluating ...
165/100000000, 3283.1767030000005/18000.0
166/100000000, 3343.1767030000005/18000.0
        -> worse: (600.0097046503001 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.025"], evaluating ...
          -> Take improving step to neighbour c1=2.025 c2=2.025 iter=5 rad=1 step=1.0 (3.0130575000000004 [based on 2 runs with cutoff 60.0]) with flip 7

          
============= Performing 4 bonus runs of state: c1=2.025 c2=2.025 iter=5 rad=1 step=1.0 (3.0130575000000004 [based on 2 runs with cutoff 60.0]) ============ 

169/100000000, 3353.2681900000002/18000.0
171/100000000, 3364.9405500000003/18000.0
          -> After 4 bonus runs: c1=2.025 c2=2.025 iter=5 rad=1 step=1.0 (4.104028333333333 [based on 6 runs with cutoff 60.0])

    Changing ["c1: 2.025->2.125"], evaluating ...
173/100000000, 3408.802205/18000.0
        -> worse: (41.001332 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
174/100000000, 3422.6600439999997/18000.0
        -> worse: (13.857839 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
175/100000000, 3482.6600439999997/18000.0
        -> worse: (600.0092134433 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->1.975"], evaluating ...
176/100000000, 3542.6600439999997/18000.0
        -> worse: (600.0093002637001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
177/100000000, 3555.116728/18000.0
        -> worse: (12.456684 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.0"], evaluating ...
178/100000000, 3615.116728/18000.0
        -> worse: (600.0092944878002 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.0"], evaluating ...
179/100000000, 3675.116728/18000.0
        -> worse: (600.0092621101 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.075"], evaluating ...
        -> worse: (4.4841035 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.1"], evaluating ...
182/100000000, 3685.7124559999997/18000.0
        -> worse: (4.883851 [based on 2 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
183/100000000, 3707.364197/18000.0
        -> worse: (21.651741 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
184/100000000, 3757.381413/18000.0
        -> worse: (50.017216 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.05"], evaluating ...
        -> worse: (3.5706464999999996 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.025->1.950"], evaluating ...
187/100000000, 3824.522706/18000.0
        -> worse: (600.0092827943001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.125"], evaluating ...
192/100000000, 3836.014397/18000.0
          -> Take improving step to neighbour c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (2.2049163333333333 [based on 6 runs with cutoff 60.0]) with flip 8

          
============= Performing 14 bonus runs of state: c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (2.2049163333333333 [based on 6 runs with cutoff 60.0]) ============ 

194/100000000, 3897.752204/18000.0
195/100000000, 3957.752204/18000.0
199/100000000, 4020.798844/18000.0
201/100000000, 4037.956322/18000.0
203/100000000, 4061.5979300000004/18000.0
204/100000000, 4121.597930000001/18000.0
205/100000000, 4181.597930000001/18000.0
          -> After 14 bonus runs: c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (126.04641111733001 [based on 20 runs with cutoff 60.0])

    Changing ["c2: 2.125->2.15"], evaluating ...
208/100000000, 4218.815662000001/18000.0
        -> worse: (33.394235 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
209/100000000, 4258.837177000001/18000.0
        -> worse: (40.021515 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
210/100000000, 4302.067548000001/18000.0
        -> worse: (43.230371 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->1.975"], evaluating ...
        -> worse: (4.689378 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.15"], evaluating ...
        -> worse: (2.761618 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.125"], evaluating ...
213/100000000, 4334.946556000002/18000.0
        -> worse: (25.428012 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
214/100000000, 4347.006381000002/18000.0
        -> worse: (12.059825 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.075"], evaluating ...
215/100000000, 4376.425521000002/18000.0
        -> worse: (29.41914 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.05"], evaluating ...
        -> worse: (2.9558400000000002 [based on 3 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
219/100000000, 4388.2049940000015/18000.0
        -> worse: (2.911953 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->1.950"], evaluating ...
220/100000000, 4422.877636000002/18000.0
        -> worse: (34.672642 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.1"], evaluating ...
        -> worse: (20.4057085 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
222/100000000, 4433.653632000002/18000.0
        -> worse: (9.130594 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
        -> worse: (7.141855 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.0"], evaluating ...
224/100000000, 4450.152022000002/18000.0
        -> worse: (9.356535 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (9.951144 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.1"], evaluating ...
226/100000000, 4520.103166000002/18000.0
        -> worse: (600.0092230940002 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
231/100000000, 4531.144174000001/18000.0
233/100000000, 4592.804346000001/18000.0
234/100000000, 4652.804346000001/18000.0
238/100000000, 4719.375515000001/18000.0
        -> worse: (151.60772075000003 [based on 12 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
        -> worse: (5.6382045000000005 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
240/100000000, 4740.937898000001/18000.0
        -> worse: (20.194362 [based on 1 runs with cutoff 60.0])
          
============= Performing 20 bonus runs of state: c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (126.04641111733001 [based on 20 runs with cutoff 60.0]) ============ 

243/100000000, 4805.115620000001/18000.0
248/100000000, 4816.9299820000015/18000.0
250/100000000, 4880.211703000002/18000.0
254/100000000, 4890.986642000002/18000.0
256/100000000, 4907.135311000002/18000.0
State wants more detail (38+1) than incumbent (38), doing incumbent first:
c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (99.24269466701581 [based on 38 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (82.47724005263159 [based on 38 runs with cutoff 60.0])
259/100000000, 4931.435893000003/18000.0
 Same incumbent, new precision:
New Incumbent: 4931.435893000003, 80.88074723076923 [39, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
260/100000000, 4991.435893000003/18000.0
State wants more detail (39+1) than incumbent (39), doing incumbent first:
c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (112.08262813709233 [based on 39 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (80.88074723076923 [based on 39 runs with cutoff 60.0])
261/100000000, 5051.435893000003/18000.0
 Same incumbent, new precision:
New Incumbent: 5051.435893000003, 93.85898105 [40, 60.0]. With state c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
262/100000000, 5111.435893000003/18000.0
          -> After 20 bonus runs for LM: c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (124.28081493366503 [based on 40 runs with cutoff 60.0])

   LM for iteration 3: c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (124.28081493366503 [based on 40 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 3): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 3): c1=2.1, c2=2.05, iter=5, rad=1, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 93.85898105, based on 40 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (124.28081493366503 [based on 40 runs with cutoff 60.0])
c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (93.85898105 [based on 40 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.025 c2=2.125 iter=5 rad=1 step=1.0 (124.28081493366503 [based on 40 runs with cutoff 60.0]), going back to c1=2.1 c2=2.05 iter=5 rad=1 step=1.0 (93.85898105 [based on 40 runs with cutoff 60.0])
262/100000000, 5111.435893000003/18000.0
iteration 4, flip 10, evaluation count 262
    perturb to ---> c1=2.025 c2=2.05 iter=5 rad=1 step=1.0 (5.6382045000000005 [based on 2 runs with cutoff 60.0])
    perturb to ---> c1=2.025 c2=2.15 iter=5 rad=1 step=1.0 (33.394235 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.025 c2=1.950 iter=5 rad=1 step=1.0 (600.0092827943001 [based on 1 runs with cutoff 60.0])
263/100000000, 5171.435893000003/18000.0
   BLS in iteration 4, start with c1=2.025 c2=1.950 iter=5 rad=1 step=1.0 (600.0096913971502 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.0"], evaluating ...
264/100000000, 5231.435893000003/18000.0
        -> worse: (600.0093001521001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
265/100000000, 5291.435893000003/18000.0
266/100000000, 5351.435893000003/18000.0
          -> Take improving step to neighbour c1=2.025 c2=1.950 iter=5 rad=2 step=1.0 (600.0096914140502 [based on 2 runs with cutoff 60.0]) with flip 10

          
============= Performing 2 bonus runs of state: c1=2.025 c2=1.950 iter=5 rad=2 step=1.0 (600.0096914140502 [based on 2 runs with cutoff 60.0]) ============ 

267/100000000, 5411.435893000003/18000.0
268/100000000, 5471.435893000003/18000.0
          -> After 2 bonus runs: c1=2.025 c2=1.950 iter=5 rad=2 step=1.0 (600.0048957070252 [based on 4 runs with cutoff 60.0])

    Changing ["c2: 1.950->1.975"], evaluating ...
269/100000000, 5531.435893000003/18000.0
        -> worse: (600.0092941882001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.025->2.0"], evaluating ...
270/100000000, 5591.435893000003/18000.0
271/100000000, 5651.435893000003/18000.0
272/100000000, 5711.435893000003/18000.0
273/100000000, 5771.435893000003/18000.0
          -> Take improving step to neighbour c1=2.0 c2=1.950 iter=5 rad=2 step=1.0 (600.0048907799252 [based on 4 runs with cutoff 60.0]) with flip 11

          
============= Performing 2 bonus runs of state: c1=2.0 c2=1.950 iter=5 rad=2 step=1.0 (600.0048907799252 [based on 4 runs with cutoff 60.0]) ============ 

274/100000000, 5831.435893000003/18000.0
275/100000000, 5891.435893000003/18000.0
          -> After 2 bonus runs: c1=2.0 c2=1.950 iter=5 rad=2 step=1.0 (600.0032938532835 [based on 6 runs with cutoff 60.0])

    Changing ["c2: 1.950->2.1"], evaluating ...
278/100000000, 5903.296986000002/18000.0
          -> Take improving step to neighbour c1=2.0 c2=2.1 iter=5 rad=2 step=1.0 (3.0765853333333335 [based on 6 runs with cutoff 60.0]) with flip 12

          
============= Performing 1 bonus runs of state: c1=2.0 c2=2.1 iter=5 rad=2 step=1.0 (3.0765853333333335 [based on 6 runs with cutoff 60.0]) ============ 

282/100000000, 5969.895405000002/18000.0
          -> After 1 bonus runs: c1=2.0 c2=2.1 iter=5 rad=2 step=1.0 (88.35280171428573 [based on 7 runs with cutoff 60.0])

    Changing ["rad: 2->3"], evaluating ...
        -> worse: (5.548143 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.0->2.125"], evaluating ...
284/100000000, 6035.443548000002/18000.0
        -> worse: (600.0092096345002 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.125"], evaluating ...
288/100000000, 6045.9978690000025/18000.0
291/100000000, 6112.406536000002/18000.0
          -> Take improving step to neighbour c1=2.0 c2=2.125 iter=5 rad=2 step=1.0 (88.13901257142858 [based on 7 runs with cutoff 60.0]) with flip 13

          
============= Performing 3 bonus runs of state: c1=2.0 c2=2.125 iter=5 rad=2 step=1.0 (88.13901257142858 [based on 7 runs with cutoff 60.0]) ============ 

292/100000000, 6172.406536000002/18000.0
          -> After 3 bonus runs: c1=2.0 c2=2.125 iter=5 rad=2 step=1.0 (122.03988020000001 [based on 10 runs with cutoff 60.0])

    Changing ["c1: 2.0->2.05"], evaluating ...
297/100000000, 6183.054072000003/18000.0
301/100000000, 6248.329671000002/18000.0
302/100000000, 6266.259727000002/18000.0
          -> Take improving step to neighbour c1=2.05 c2=2.125 iter=5 rad=2 step=1.0 (63.36740380000001 [based on 10 runs with cutoff 60.0]) with flip 14

          
============= Performing 1 bonus runs of state: c1=2.05 c2=2.125 iter=5 rad=2 step=1.0 (63.36740380000001 [based on 10 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.05 c2=2.125 iter=5 rad=2 step=1.0 (58.20423627272728 [based on 11 runs with cutoff 60.0])

    Changing ["iter: 5->10"], evaluating ...
306/100000000, 6279.058441000003/18000.0
        -> worse: (2.989792 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
        -> worse: (2.5824275 [based on 4 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
308/100000000, 6340.520631000003/18000.0
        -> worse: (600.0092096612001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.125"], evaluating ...
309/100000000, 6357.006171000003/18000.0
        -> worse: (16.48554 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.0"], evaluating ...
        -> worse: (4.272872 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.975"], evaluating ...
311/100000000, 6421.279043000002/18000.0
        -> worse: (600.0092093545002 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
        -> worse: (4.750637 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->1.975"], evaluating ...
313/100000000, 6434.742215000002/18000.0
        -> worse: (8.712535 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
        -> worse: (4.286687 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
        -> worse: (4.713048 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
316/100000000, 6463.471490000002/18000.0
        -> worse: (19.72954 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.075"], evaluating ...
322/100000000, 6473.894195000001/18000.0
323/100000000, 6533.894195000001/18000.0
324/100000000, 6549.530391000001/18000.0
          -> Take improving step to neighbour c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (57.418539090909114 [based on 11 runs with cutoff 60.0]) with flip 15

          
============= Performing 12 bonus runs of state: c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (57.418539090909114 [based on 11 runs with cutoff 60.0]) ============ 

328/100000000, 6578.386639/18000.0
330/100000000, 6589.039387/18000.0
333/100000000, 6652.864927/18000.0
339/100000000, 6688.264982/18000.0
          -> After 12 bonus runs: c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (56.73103008695654 [based on 23 runs with cutoff 60.0])

    Changing ["c2: 2.125->2.05"], evaluating ...
        -> worse: (9.36006 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.950"], evaluating ...
341/100000000, 6702.283614/18000.0
        -> worse: (4.658572 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
342/100000000, 6762.283614/18000.0
        -> worse: (600.0092061585001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (4.906612 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
        -> worse: (1.79011 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
345/100000000, 6828.980336/18000.0
        -> worse: (600.0092702751001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
346/100000000, 6888.980336/18000.0
        -> worse: (600.0092090634001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
        -> worse: (9.45333 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.950"], evaluating ...
348/100000000, 6958.433666/18000.0
        -> worse: (600.0093001156001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.025"], evaluating ...
        -> worse: (22.4457685 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
350/100000000, 7020.094832/18000.0
        -> worse: (600.0092108160002 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.0"], evaluating ...
351/100000000, 7050.672265/18000.0
        -> worse: (30.577433 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (2.9456785 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.975"], evaluating ...
354/100000000, 7072.266957/18000.0
        -> worse: (15.703335 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.075"], evaluating ...
        -> worse: (3.394833 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
        -> worse: (15.8529235 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (1.9754235 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
359/100000000, 7141.899344/18000.0
        -> worse: (600.0092302763001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.1"], evaluating ...
        -> worse: (4.600997 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
        -> worse: (3.154319 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
362/100000000, 7152.873067/18000.0
        -> worse: (3.218407 [based on 1 runs with cutoff 60.0])
          
============= Performing 21 bonus runs of state: c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (56.73103008695654 [based on 23 runs with cutoff 60.0]) ============ 

365/100000000, 7216.628694000001/18000.0
369/100000000, 7281.966906000001/18000.0
376/100000000, 7292.6539170000015/18000.0
378/100000000, 7331.710850000002/18000.0
379/100000000, 7391.710850000002/18000.0
New inc: 79.09179437499998
New Incumbent: 7391.710850000002, 79.09179437499998 [40, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
 Same incumbent, new precision:
New Incumbent: 7394.911940000002, 77.24080158536584 [41, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
381/100000000, 7454.911940000002/18000.0
 Same incumbent, new precision:
New Incumbent: 7454.911940000002, 89.68745154761903 [42, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
 Same incumbent, new precision:
New Incumbent: 7456.505557000002, 87.63875772093023 [43, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
 Same incumbent, new precision:
New Incumbent: 7459.951786000002, 85.7252911590909 [44, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
          -> After 21 bonus runs for LM: c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])

   LM for iteration 4: c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 4): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 4): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
LM better, change incumbent
New Incumbent: 7459.951786000002, 85.7252911590909 [44, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
   Accepting new better local optimum: c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
383/100000000, 7459.951786000002/18000.0
iteration 5, flip 17, evaluation count 383
    perturb to ---> c1=2.075 c2=2.125 iter=5 rad=3 step=1.0 (600.0092061585001 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.0 iter=5 rad=3 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.075 c2=2.0 iter=10 rad=3 step=1.0 (100000000 [based on 0 runs with cutoff 0])
   BLS in iteration 5, start with c1=2.075 c2=2.0 iter=10 rad=3 step=1.0 (2.548855 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->8"], evaluating ...
385/100000000, 7471.260972000003/18000.0
        -> worse: (8.760331 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.0"], evaluating ...
386/100000000, 7531.260972000003/18000.0
        -> worse: (600.0092505184001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.975"], evaluating ...
387/100000000, 7591.260972000003/18000.0
        -> worse: (600.0092976065001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.025"], evaluating ...
388/100000000, 7651.260972000003/18000.0
        -> worse: (600.0092624714001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
389/100000000, 7661.683794000003/18000.0
        -> worse: (10.422822 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.0->2.15"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (1.277802 [based on 1 runs with cutoff 60.0]) with flip 17

          
============= Performing 6 bonus runs of state: c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (1.277802 [based on 1 runs with cutoff 60.0]) ============ 

391/100000000, 7722.961596000003/18000.0
396/100000000, 7791.7817330000025/18000.0
          -> After 6 bonus runs: c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (172.87401985714288 [based on 7 runs with cutoff 60.0])

    Changing ["iter: 10->5"], evaluating ...
397/100000000, 7802.977018000002/18000.0
        -> worse: (11.195285 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.025"], evaluating ...
        -> worse: (2.526398 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->1.950"], evaluating ...
399/100000000, 7865.503416000002/18000.0
        -> worse: (600.0092307827001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.1"], evaluating ...
        -> worse: (2.817208 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->12"], evaluating ...
        -> worse: (4.0765 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
402/100000000, 7876.968272000003/18000.0
        -> worse: (4.571148 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 3->2"], evaluating ...
        -> worse: (2.480558 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
        -> worse: (1.516227 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->8"], evaluating ...
        -> worse: (1.667647 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.975"], evaluating ...
406/100000000, 7942.632704000003/18000.0
        -> worse: (600.0092267127001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->1.975"], evaluating ...
        -> worse: (4.926164 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 3->1"], evaluating ...
408/100000000, 8007.558868000004/18000.0
        -> worse: (600.0092503810001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
        -> worse: (1.471467 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
        -> worse: (3.345452 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (1.432243 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.125"], evaluating ...
412/100000000, 8043.806255000004/18000.0
        -> worse: (29.998225 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.025"], evaluating ...
        -> worse: (6.006853 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.05"], evaluating ...
414/100000000, 8060.450660000004/18000.0
        -> worse: (10.637552 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.0"], evaluating ...
        -> worse: (2.510091 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 10->3"], evaluating ...
        -> worse: (1.496231 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.950"], evaluating ...
        -> worse: (2.472439 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.15->2.075"], evaluating ...
418/100000000, 8126.929421000004/18000.0
        -> worse: (600.0092083052001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
        -> worse: (1.380978 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
        -> worse: (3.269912 [based on 1 runs with cutoff 60.0])
          
============= Performing 24 bonus runs of state: c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (172.87401985714288 [based on 7 runs with cutoff 60.0]) ============ 

424/100000000, 8139.726040000004/18000.0
425/100000000, 8199.726040000005/18000.0
430/100000000, 8269.385132000003/18000.0
436/100000000, 8337.114277000004/18000.0
439/100000000, 8400.001622000003/18000.0
443/100000000, 8412.544676000005/18000.0
          -> After 24 bonus runs for LM: c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (117.82465574193554 [based on 31 runs with cutoff 60.0])

   LM for iteration 5: c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (117.82465574193554 [based on 31 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 5): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 5): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (117.82465574193554 [based on 31 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.075 c2=2.15 iter=10 rad=3 step=1.0 (117.82465574193554 [based on 31 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
444/100000000, 8414.006100000004/18000.0
iteration 6, flip 19, evaluation count 444
    perturb to ---> c1=2.075 c2=2.125 iter=12 rad=2 step=1.0 (4.906612 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.025 iter=12 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.15 c2=2.025 iter=12 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
445/100000000, 8432.242460000005/18000.0
   BLS in iteration 6, start with c1=2.15 c2=2.025 iter=12 rad=2 step=1.0 (18.23636 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 12->5"], evaluating ...
          -> Take improving step to neighbour c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (1.937854 [based on 1 runs with cutoff 60.0]) with flip 19

          
============= Performing 1 bonus runs of state: c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (1.937854 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (1.810826 [based on 2 runs with cutoff 60.0])

    Changing ["iter: 5->8"], evaluating ...
        -> worse: (3.964873 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.125"], evaluating ...
        -> worse: (2.18117 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.1"], evaluating ...
450/100000000, 8443.711639000006/18000.0
        -> worse: (2.674633 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
451/100000000, 8503.711639000006/18000.0
        -> worse: (600.0092416398 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->1.950"], evaluating ...
452/100000000, 8563.711639000006/18000.0
        -> worse: (600.0092797267001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
453/100000000, 8584.934248000007/18000.0
        -> worse: (21.222609 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (4.908476 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.025"], evaluating ...
        -> worse: (12.055417 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.0"], evaluating ...
456/100000000, 8600.082177000008/18000.0
        -> worse: (7.78036 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->1.975"], evaluating ...
        -> worse: (2.616679 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
458/100000000, 8634.825476000009/18000.0
        -> worse: (32.12662 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.075"], evaluating ...
        -> worse: (3.57038 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.075"], evaluating ...
        -> worse: (301.15701113815004 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (2.0483655 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.1"], evaluating ...
463/100000000, 8647.225015000009/18000.0
        -> worse: (2.427636 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.125"], evaluating ...
        -> worse: (2.738929 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.15"], evaluating ...
465/100000000, 8657.595075000008/18000.0
        -> worse: (7.631131 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
        -> worse: (2.24979 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->1.950"], evaluating ...
        -> worse: (4.169142 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.05"], evaluating ...
468/100000000, 8675.534558000008/18000.0
        -> worse: (11.520551 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.0"], evaluating ...
469/100000000, 8731.466588000008/18000.0
        -> worse: (55.93203 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.05"], evaluating ...
        -> worse: (2.906326 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.15->1.975"], evaluating ...
471/100000000, 8792.99255300001/18000.0
        -> worse: (600.0093155544001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
472/100000000, 8852.99255300001/18000.0
        -> worse: (600.0092107706001 [based on 1 runs with cutoff 60.0])
          
============= Performing 24 bonus runs of state: c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (1.810826 [based on 2 runs with cutoff 60.0]) ============ 

477/100000000, 8919.64321100001/18000.0
478/100000000, 8979.64321100001/18000.0
482/100000000, 9044.402413000009/18000.0
485/100000000, 9055.157688000008/18000.0
486/100000000, 9066.800128000008/18000.0
487/100000000, 9126.800128000008/18000.0
493/100000000, 9195.494850000008/18000.0
496/100000000, 9259.393662000008/18000.0
          -> After 24 bonus runs for LM: c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (140.38666773076923 [based on 26 runs with cutoff 60.0])

   LM for iteration 6: c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (140.38666773076923 [based on 26 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 6): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 6): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (140.38666773076923 [based on 26 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.15 c2=2.025 iter=5 rad=2 step=1.0 (140.38666773076923 [based on 26 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
496/100000000, 9259.393662000008/18000.0
iteration 7, flip 21, evaluation count 496
    perturb to ---> c1=2.075 c2=2.125 iter=8 rad=2 step=1.0 (3.218407 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.075 iter=8 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.075 c2=2.05 iter=8 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
   BLS in iteration 7, start with c1=2.075 c2=2.05 iter=8 rad=2 step=1.0 (8.754717 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
498/100000000, 9300.726313000008/18000.0
        -> worse: (32.577934 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
          -> Take improving step to neighbour c1=2.125 c2=2.05 iter=8 rad=2 step=1.0 (4.764001 [based on 1 runs with cutoff 60.0]) with flip 21

          
============= Performing 2 bonus runs of state: c1=2.125 c2=2.05 iter=8 rad=2 step=1.0 (4.764001 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 2 bonus runs: c1=2.125 c2=2.05 iter=8 rad=2 step=1.0 (2.544912666666667 [based on 3 runs with cutoff 60.0])

    Changing ["step: 1.0->0.8"], evaluating ...
502/100000000, 9311.25623900001/18000.0
          -> Take improving step to neighbour c1=2.125 c2=2.05 iter=8 rad=2 step=0.8 (2.1420293333333333 [based on 3 runs with cutoff 60.0]) with flip 22

          
============= Performing 1 bonus runs of state: c1=2.125 c2=2.05 iter=8 rad=2 step=0.8 (2.1420293333333333 [based on 3 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.125 c2=2.05 iter=8 rad=2 step=0.8 (2.0068565 [based on 4 runs with cutoff 60.0])

    Changing ["c2: 2.05->2.125"], evaluating ...
507/100000000, 9321.265764000012/18000.0
        -> worse: (2.6146433333333334 [based on 3 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.075"], evaluating ...
509/100000000, 9340.875288000012/18000.0
        -> worse: (16.642881 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
511/100000000, 9357.658596000012/18000.0
        -> worse: (8.391653999999999 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 8->10"], evaluating ...
        -> worse: (5.635132 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->0.5"], evaluating ...
513/100000000, 9423.293728000011/18000.0
        -> worse: (600.0092322474002 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->5"], evaluating ...
          -> Take improving step to neighbour c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (1.9329264999999998 [based on 4 runs with cutoff 60.0]) with flip 23

          
============= Performing 6 bonus runs of state: c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (1.9329264999999998 [based on 4 runs with cutoff 60.0]) ============ 

519/100000000, 9434.256203000012/18000.0
520/100000000, 9494.256203000012/18000.0
521/100000000, 9554.256203000012/18000.0
          -> After 6 bonus runs: c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (121.50888790000002 [based on 10 runs with cutoff 60.0])

    Changing ["step: 0.8->0.5"], evaluating ...
524/100000000, 9618.372407000012/18000.0
        -> worse: (600.0092515009001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.0"], evaluating ...
        -> worse: (1.9629836 [based on 5 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.075"], evaluating ...
530/100000000, 9631.35429200001/18000.0
        -> worse: (3.166967 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.075"], evaluating ...
531/100000000, 9650.58915400001/18000.0
        -> worse: (19.234862 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.025"], evaluating ...
        -> worse: (3.621222 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.125"], evaluating ...
533/100000000, 9714.21037600001/18000.0
        -> worse: (600.0092058373001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->1.950"], evaluating ...
534/100000000, 9774.21037600001/18000.0
        -> worse: (600.0092716245001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.15"], evaluating ...
        -> worse: (5.251213 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
538/100000000, 9785.75765500001/18000.0
        -> worse: (2.0986886666666664 [based on 3 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
        -> worse: (7.870985 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.15"], evaluating ...
540/100000000, 9853.62864000001/18000.0
        -> worse: (600.0092232400001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->1.950"], evaluating ...
        -> worse: (5.924813 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.1"], evaluating ...
542/100000000, 9919.55345300001/18000.0
        -> worse: (600.0092509170001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->1.975"], evaluating ...
543/100000000, 9947.02007200001/18000.0
        -> worse: (27.466619 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.2"], evaluating ...
544/100000000, 10007.02007200001/18000.0
        -> worse: (600.0092149259001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
        -> worse: (2.511554 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.125->1.975"], evaluating ...
547/100000000, 10072.04318000001/18000.0
        -> worse: (600.0092410627001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (3.720321 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.025"], evaluating ...
549/100000000, 10135.76350100001/18000.0
        -> worse: (600.0092146985002 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.1"], evaluating ...
        -> worse: (9.627342 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.05"], evaluating ...
551/100000000, 10180.50998000001/18000.0
        -> worse: (35.119137 [based on 1 runs with cutoff 60.0])
    Changing ["step: 0.8->1.0"], evaluating ...
552/100000000, 10220.66269100001/18000.0
        -> worse: (40.152711 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.125->2.0"], evaluating ...
553/100000000, 10280.66269100001/18000.0
        -> worse: (600.0092400560002 [based on 1 runs with cutoff 60.0])
          
============= Performing 23 bonus runs of state: c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (121.50888790000002 [based on 10 runs with cutoff 60.0]) ============ 

555/100000000, 10342.71799400001/18000.0
557/100000000, 10384.50624100001/18000.0
560/100000000, 10450.146766000009/18000.0
561/100000000, 10510.146766000009/18000.0
566/100000000, 10567.967212000009/18000.0
569/100000000, 10616.13112000001/18000.0
573/100000000, 10681.58009200001/18000.0
576/100000000, 10693.980801000009/18000.0
          -> After 23 bonus runs for LM: c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (114.80141031823032 [based on 33 runs with cutoff 60.0])

   LM for iteration 7: c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (114.80141031823032 [based on 33 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 7): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 7): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (114.80141031823032 [based on 33 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.125 c2=2.05 iter=5 rad=2 step=0.8 (114.80141031823032 [based on 33 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
576/100000000, 10693.980801000009/18000.0
iteration 8, flip 25, evaluation count 576
    perturb to ---> c1=2.075 c2=2.125 iter=3 rad=2 step=1.0 (600.0092090634001 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.125 iter=3 rad=1 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=2.075 c2=2.0 iter=3 rad=1 step=1.0 (100000000 [based on 0 runs with cutoff 0])
577/100000000, 10710.211677000008/18000.0
   BLS in iteration 8, start with c1=2.075 c2=2.0 iter=3 rad=1 step=1.0 (16.230876 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->8"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=2.0 iter=8 rad=1 step=1.0 (8.086047 [based on 1 runs with cutoff 60.0]) with flip 25

          
============= Performing 1 bonus runs of state: c1=2.075 c2=2.0 iter=8 rad=1 step=1.0 (8.086047 [based on 1 runs with cutoff 60.0]) ============ 

579/100000000, 10720.354699000009/18000.0
          -> After 1 bonus runs: c1=2.075 c2=2.0 iter=8 rad=1 step=1.0 (5.071511 [based on 2 runs with cutoff 60.0])

    Changing ["c2: 2.0->2.075"], evaluating ...
580/100000000, 10756.404374000009/18000.0
        -> worse: (36.049675 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.0->1.950"], evaluating ...
581/100000000, 10812.44462100001/18000.0
        -> worse: (56.040247 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.950"], evaluating ...
582/100000000, 10872.44462100001/18000.0
        -> worse: (600.0092644876001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.0"], evaluating ...
583/100000000, 10932.44462100001/18000.0
        -> worse: (600.0092990002001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.0->1.975"], evaluating ...
584/100000000, 10972.26069300001/18000.0
        -> worse: (319.9126413138 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
586/100000000, 10997.571506000008/18000.0
        -> worse: (12.6554065 [based on 2 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
587/100000000, 11057.571506000008/18000.0
        -> worse: (304.3852155 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
589/100000000, 11080.467829000008/18000.0
        -> worse: (11.448161500000001 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.0->2.025"], evaluating ...
          -> Take improving step to neighbour c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (2.390503 [based on 2 runs with cutoff 60.0]) with flip 26

          
============= Performing 9 bonus runs of state: c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (2.390503 [based on 2 runs with cutoff 60.0]) ============ 

594/100000000, 11091.36839900001/18000.0
596/100000000, 11153.97371700001/18000.0
597/100000000, 11185.80599800001/18000.0
599/100000000, 11205.68452000001/18000.0
          -> After 9 bonus runs: c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (60.660592636363646 [based on 11 runs with cutoff 60.0])

    Changing ["c1: 2.075->2.0"], evaluating ...
601/100000000, 11267.72424800001/18000.0
        -> worse: (600.0092319825001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.15"], evaluating ...
602/100000000, 11327.72424800001/18000.0
        -> worse: (600.0092006084001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.125"], evaluating ...
603/100000000, 11387.72424800001/18000.0
        -> worse: (600.0092048214001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->5"], evaluating ...
        -> worse: (8.054948 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->10"], evaluating ...
605/100000000, 11404.10819700001/18000.0
        -> worse: (8.329001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.025"], evaluating ...
        -> worse: (7.959037499999999 [based on 2 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (2.572542 [based on 2 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
609/100000000, 11417.743995000012/18000.0
        -> worse: (5.029323 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.950"], evaluating ...
610/100000000, 11477.743995000012/18000.0
        -> worse: (600.0092357973001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->3"], evaluating ...
611/100000000, 11537.743995000012/18000.0
        -> worse: (600.0092086543001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
        -> worse: (7.377047 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.15"], evaluating ...
613/100000000, 11549.74581400001/18000.0
        -> worse: (4.624772 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->3"], evaluating ...
        -> worse: (9.171965 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.1"], evaluating ...
615/100000000, 11563.418700000011/18000.0
        -> worse: (4.500921 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
616/100000000, 11580.93553800001/18000.0
        -> worse: (17.516838 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.05"], evaluating ...
        -> worse: (9.013308 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->12"], evaluating ...
618/100000000, 11608.196183000011/18000.0
        -> worse: (18.247337 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.1"], evaluating ...
        -> worse: (3.537106 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 1->2"], evaluating ...
620/100000000, 11618.40431300001/18000.0
        -> worse: (6.671024 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->1.975"], evaluating ...
621/100000000, 11678.40431300001/18000.0
        -> worse: (600.0092270359 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.025->2.125"], evaluating ...
622/100000000, 11738.40431300001/18000.0
        -> worse: (600.0092043613001 [based on 1 runs with cutoff 60.0])
          
============= Performing 21 bonus runs of state: c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (60.660592636363646 [based on 11 runs with cutoff 60.0]) ============ 

623/100000000, 11798.40431300001/18000.0
625/100000000, 11860.17944900001/18000.0
628/100000000, 11886.99184200001/18000.0
632/100000000, 11897.327066000009/18000.0
635/100000000, 11907.77818200001/18000.0
637/100000000, 11970.27750000001/18000.0
641/100000000, 12038.786413000009/18000.0
          -> After 21 bonus runs for LM: c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (97.83990262500002 [based on 32 runs with cutoff 60.0])

   LM for iteration 8: c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (97.83990262500002 [based on 32 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 8): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 8): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (97.83990262500002 [based on 32 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.075 c2=2.025 iter=8 rad=1 step=1.0 (97.83990262500002 [based on 32 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
643/100000000, 12041.99427800001/18000.0
iteration 9, flip 28, evaluation count 643
    perturb to ---> c1=2.15 c2=2.125 iter=5 rad=2 step=1.0 (2.18117 [based on 2 runs with cutoff 60.0])
    perturb to ---> c1=1.950 c2=2.125 iter=5 rad=2 step=1.0 (4.658572 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=1.950 c2=2.125 iter=5 rad=2 step=1.2 (100000000 [based on 0 runs with cutoff 0])
644/100000000, 12055.93485800001/18000.0
   BLS in iteration 9, start with c1=1.950 c2=2.125 iter=5 rad=2 step=1.2 (13.94058 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.0"], evaluating ...
645/100000000, 12115.93485800001/18000.0
        -> worse: (600.0093054746001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
          -> Take improving step to neighbour c1=1.950 c2=2.125 iter=5 rad=3 step=1.2 (2.538013 [based on 1 runs with cutoff 60.0]) with flip 28

          
============= Performing 2 bonus runs of state: c1=1.950 c2=2.125 iter=5 rad=3 step=1.2 (2.538013 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 2 bonus runs: c1=1.950 c2=2.125 iter=5 rad=3 step=1.2 (2.715706666666667 [based on 3 runs with cutoff 60.0])

    Changing ["c1: 1.950->2.1"], evaluating ...
649/100000000, 12184.08197800001/18000.0
        -> worse: (600.0092608626001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
650/100000000, 12244.08197800001/18000.0
        -> worse: (600.0092254151001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
651/100000000, 12304.08197800001/18000.0
        -> worse: (600.0092366847001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
652/100000000, 12364.08197800001/18000.0
        -> worse: (600.0093030125001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.05"], evaluating ...
          -> Take improving step to neighbour c1=2.05 c2=2.125 iter=5 rad=3 step=1.2 (2.1616113333333336 [based on 3 runs with cutoff 60.0]) with flip 29

          
============= Performing 5 bonus runs of state: c1=2.05 c2=2.125 iter=5 rad=3 step=1.2 (2.1616113333333336 [based on 3 runs with cutoff 60.0]) ============ 

657/100000000, 12374.537084000009/18000.0
659/100000000, 12436.059120000009/18000.0
660/100000000, 12496.059120000009/18000.0
          -> After 5 bonus runs: c1=2.05 c2=2.125 iter=5 rad=3 step=1.2 (151.49841775000002 [based on 8 runs with cutoff 60.0])

    Changing ["c2: 2.125->2.1"], evaluating ...
661/100000000, 12509.64615000001/18000.0
        -> worse: (13.58703 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.15"], evaluating ...
667/100000000, 12520.21544300001/18000.0
668/100000000, 12532.30232900001/18000.0
669/100000000, 12547.566728000009/18000.0
          -> Take improving step to neighbour c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (4.74007225 [based on 8 runs with cutoff 60.0]) with flip 30

          
============= Performing 2 bonus runs of state: c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (4.74007225 [based on 8 runs with cutoff 60.0]) ============ 

          -> After 2 bonus runs: c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (4.130871000000001 [based on 10 runs with cutoff 60.0])

    Changing ["c1: 2.15->2.025"], evaluating ...
672/100000000, 12564.53801000001/18000.0
        -> worse: (13.58315 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
        -> worse: (2.055746 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.1"], evaluating ...
674/100000000, 12626.59375600001/18000.0
        -> worse: (600.0092205080001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (1.675318 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
676/100000000, 12688.269074000009/18000.0
        -> worse: (600.0092089975001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.125"], evaluating ...
        -> worse: (1.861713 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
678/100000000, 12750.13078700001/18000.0
        -> worse: (600.0092669621001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 3->2"], evaluating ...
        -> worse: (1.920832 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.2->1.0"], evaluating ...
680/100000000, 12812.051619000009/18000.0
        -> worse: (600.0092252704001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.975"], evaluating ...
        -> worse: (2.000741 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.2->0.8"], evaluating ...
        -> worse: (1.7812785 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.0"], evaluating ...
        -> worse: (3.397656 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.075"], evaluating ...
685/100000000, 12832.720931000009/18000.0
        -> worse: (11.708358 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.950"], evaluating ...
686/100000000, 12879.473615000008/18000.0
        -> worse: (46.752684 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.2->0.5"], evaluating ...
        -> worse: (1.85633 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->1.975"], evaluating ...
688/100000000, 12941.329945000009/18000.0
        -> worse: (600.0092129981001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
689/100000000, 13001.329945000009/18000.0
        -> worse: (600.0092077084001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.075"], evaluating ...
        -> worse: (2.900481 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 3->1"], evaluating ...
        -> worse: (3.505217 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.15->2.0"], evaluating ...
692/100000000, 13067.735643000009/18000.0
        -> worse: (600.0092172728001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
693/100000000, 13127.735643000009/18000.0
        -> worse: (600.0092171347002 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
        -> worse: (1.859194 [based on 1 runs with cutoff 60.0])
          
============= Performing 22 bonus runs of state: c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (4.130871000000001 [based on 10 runs with cutoff 60.0]) ============ 

696/100000000, 13191.88540900001/18000.0
698/100000000, 13212.72079300001/18000.0
700/100000000, 13274.158468000009/18000.0
701/100000000, 13334.158468000009/18000.0
707/100000000, 13401.505254000009/18000.0
710/100000000, 13412.98534800001/18000.0
714/100000000, 13478.79529500001/18000.0
          -> After 22 bonus runs for LM: c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (96.67362855228438 [based on 32 runs with cutoff 60.0])

   LM for iteration 9: c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (96.67362855228438 [based on 32 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 9): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 9): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (96.67362855228438 [based on 32 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.15 c2=2.125 iter=5 rad=3 step=1.2 (96.67362855228438 [based on 32 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
716/100000000, 13481.80258100001/18000.0
iteration 10, flip 32, evaluation count 716
    perturb to ---> c1=2.075 c2=1.975 iter=5 rad=2 step=1.0 (15.703335 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=1.950 c2=1.975 iter=5 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=1.950 c2=2.125 iter=5 rad=2 step=1.0 (4.658572 [based on 1 runs with cutoff 60.0])
717/100000000, 13492.88170300001/18000.0
   BLS in iteration 10, start with c1=1.950 c2=2.125 iter=5 rad=2 step=1.0 (7.868847000000001 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->12"], evaluating ...
718/100000000, 13535.89621100001/18000.0
        -> worse: (43.014508 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.0"], evaluating ...
719/100000000, 13595.89621100001/18000.0
        -> worse: (600.0093284911001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 5->8"], evaluating ...
720/100000000, 13609.43113600001/18000.0
        -> worse: (13.534925 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
721/100000000, 13669.43113600001/18000.0
        -> worse: (600.0093110953001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.975"], evaluating ...
722/100000000, 13729.43113600001/18000.0
        -> worse: (600.0092837561001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->1.975"], evaluating ...
723/100000000, 13789.43113600001/18000.0
        -> worse: (304.36131750000004 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->10"], evaluating ...
        -> worse: (6.196046 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.075"], evaluating ...
725/100000000, 13855.62718200001/18000.0
        -> worse: (600.0092922584001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.1"], evaluating ...
        -> worse: (300.7270259080001 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.125"], evaluating ...
727/100000000, 13867.12388100001/18000.0
        -> worse: (13.268699 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 5->3"], evaluating ...
          -> Take improving step to neighbour c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (2.598307 [based on 2 runs with cutoff 60.0]) with flip 32

          
============= Performing 11 bonus runs of state: c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (2.598307 [based on 2 runs with cutoff 60.0]) ============ 

732/100000000, 13880.17182400001/18000.0
734/100000000, 13946.91300500001/18000.0
735/100000000, 14006.91300500001/18000.0
737/100000000, 14018.85799200001/18000.0
739/100000000, 14081.398583000011/18000.0
          -> After 11 bonus runs: c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (99.69876453846155 [based on 13 runs with cutoff 60.0])

    Changing ["rad: 2->1"], evaluating ...
741/100000000, 14100.012489000012/18000.0
        -> worse: (16.814869 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->1.975"], evaluating ...
        -> worse: (4.423088 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
        -> worse: (4.039708 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.15"], evaluating ...
744/100000000, 14110.812366000011/18000.0
        -> worse: (2.337081 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.125"], evaluating ...
745/100000000, 14130.54193700001/18000.0
        -> worse: (19.729571 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.1"], evaluating ...
746/100000000, 14141.808472000012/18000.0
        -> worse: (11.266535 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.075"], evaluating ...
        -> worse: (300.82784703170006 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.15"], evaluating ...
748/100000000, 14203.45495700001/18000.0
        -> worse: (600.0092148852001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.025"], evaluating ...
749/100000000, 14263.45495700001/18000.0
        -> worse: (600.0093163064001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.1"], evaluating ...
750/100000000, 14323.45495700001/18000.0
        -> worse: (600.0092189183001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
751/100000000, 14383.45495700001/18000.0
        -> worse: (600.0093354396001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
        -> worse: (7.864501 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
753/100000000, 14395.308423000011/18000.0
        -> worse: (3.988965 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.950"], evaluating ...
754/100000000, 14455.308423000011/18000.0
        -> worse: (600.0093431558001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
        -> worse: (2.634146 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.0"], evaluating ...
756/100000000, 14517.942569000012/18000.0
        -> worse: (600.0092269134001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.025"], evaluating ...
757/100000000, 14577.942569000012/18000.0
        -> worse: (600.0092126717001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 1.950->2.05"], evaluating ...
        -> worse: (3.1541265000000003 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.125->1.975"], evaluating ...
759/100000000, 14639.500185000012/18000.0
        -> worse: (600.0093115424 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.0"], evaluating ...
760/100000000, 14699.500185000012/18000.0
        -> worse: (600.0093393853001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.075"], evaluating ...
761/100000000, 14759.500185000012/18000.0
        -> worse: (600.0093342282001 [based on 1 runs with cutoff 60.0])
          
============= Performing 21 bonus runs of state: c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (99.69876453846155 [based on 13 runs with cutoff 60.0]) ============ 

762/100000000, 14819.500185000012/18000.0
765/100000000, 14884.516495000013/18000.0
766/100000000, 14911.729677000012/18000.0
769/100000000, 14924.956466000014/18000.0
771/100000000, 14987.800407000013/18000.0
774/100000000, 14998.430775000012/18000.0
777/100000000, 15063.478218000013/18000.0
778/100000000, 15123.478218000013/18000.0
          -> After 21 bonus runs for LM: c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (128.48701235806766 [based on 34 runs with cutoff 60.0])

   LM for iteration 10: c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (128.48701235806766 [based on 34 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 10): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 10): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 85.7252911590909, based on 44 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (128.48701235806766 [based on 34 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=1.950 c2=2.125 iter=3 rad=2 step=1.0 (128.48701235806766 [based on 34 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
782/100000000, 15131.945065000014/18000.0
iteration 11, flip 34, evaluation count 782
    perturb to ---> c1=2.075 c2=2.0 iter=5 rad=2 step=1.0 (30.577433 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.0 iter=3 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
    perturb to ---> c1=1.975 c2=2.0 iter=3 rad=2 step=1.0 (100000000 [based on 0 runs with cutoff 0])
783/100000000, 15191.945065000014/18000.0
   BLS in iteration 11, start with c1=1.975 c2=2.0 iter=3 rad=2 step=1.0 (600.0092828281001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.0->2.05"], evaluating ...
784/100000000, 15251.945065000014/18000.0
          -> Take improving step to neighbour c1=1.975 c2=2.05 iter=3 rad=2 step=1.0 (600.0092466022 [based on 1 runs with cutoff 60.0]) with flip 34

          
============= Performing 1 bonus runs of state: c1=1.975 c2=2.05 iter=3 rad=2 step=1.0 (600.0092466022 [based on 1 runs with cutoff 60.0]) ============ 

785/100000000, 15278.209035000014/18000.0
          -> After 1 bonus runs: c1=1.975 c2=2.05 iter=3 rad=2 step=1.0 (313.1366083011 [based on 2 runs with cutoff 60.0])

    Changing ["c1: 1.975->2.1"], evaluating ...
          -> Take improving step to neighbour c1=2.1 c2=2.05 iter=3 rad=2 step=1.0 (2.5852115 [based on 2 runs with cutoff 60.0]) with flip 35

          
============= Performing 1 bonus runs of state: c1=2.1 c2=2.05 iter=3 rad=2 step=1.0 (2.5852115 [based on 2 runs with cutoff 60.0]) ============ 

788/100000000, 15292.231604000013/18000.0
          -> After 1 bonus runs: c1=2.1 c2=2.05 iter=3 rad=2 step=1.0 (4.674189666666667 [based on 3 runs with cutoff 60.0])

    Changing ["c1: 2.1->2.05"], evaluating ...
        -> worse: (7.65896 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.025"], evaluating ...
790/100000000, 15332.330519000014/18000.0
        -> worse: (32.439955 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.1"], evaluating ...
          -> Take improving step to neighbour c1=2.1 c2=2.1 iter=3 rad=2 step=1.0 (1.6003476666666667 [based on 3 runs with cutoff 60.0]) with flip 36

          
============= Performing 3 bonus runs of state: c1=2.1 c2=2.1 iter=3 rad=2 step=1.0 (1.6003476666666667 [based on 3 runs with cutoff 60.0]) ============ 

          -> After 3 bonus runs: c1=2.1 c2=2.1 iter=3 rad=2 step=1.0 (1.647286 [based on 6 runs with cutoff 60.0])

    Changing ["c2: 2.1->2.125"], evaluating ...
797/100000000, 15343.921043000015/18000.0
        -> worse: (300.8580134591501 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.0"], evaluating ...
        -> worse: (4.507063 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->1.975"], evaluating ...
        -> worse: (5.159816 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->12"], evaluating ...
800/100000000, 15359.227461000013/18000.0
        -> worse: (5.639539 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.075"], evaluating ...
        -> worse: (3.647205 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
803/100000000, 15424.639551000013/18000.0
        -> worse: (300.88749250000006 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.1->1.950"], evaluating ...
804/100000000, 15439.008283000014/18000.0
        -> worse: (14.368732 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->5"], evaluating ...
        -> worse: (3.74179 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.025"], evaluating ...
        -> worse: (2.308261 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->1.2"], evaluating ...
807/100000000, 15452.258225000014/18000.0
        -> worse: (7.199891 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.0"], evaluating ...
808/100000000, 15473.765737000014/18000.0
        -> worse: (21.507512 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
        -> worse: (2.609197 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.125"], evaluating ...
810/100000000, 15536.374934000014/18000.0
        -> worse: (600.0092024377001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.15"], evaluating ...
811/100000000, 15596.374934000014/18000.0
        -> worse: (600.0092221882 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->1.975"], evaluating ...
        -> worse: (3.732321 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.075"], evaluating ...
        -> worse: (1.6987166666666667 [based on 3 runs with cutoff 60.0])
    Changing ["iter: 3->8"], evaluating ...
816/100000000, 15613.142601000014/18000.0
        -> worse: (7.939196 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->10"], evaluating ...
        -> worse: (2.730052 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.0->0.8"], evaluating ...
        -> worse: (2.18841 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.025"], evaluating ...
        -> worse: (1.903686 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->1.950"], evaluating ...
820/100000000, 15632.212770000015/18000.0
        -> worse: (11.757278 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.05"], evaluating ...
        -> worse: (1.8348585 [based on 2 runs with cutoff 60.0])
    Changing ["step: 1.0->0.5"], evaluating ...
827/100000000, 15643.316797000012/18000.0
          -> Take improving step to neighbour c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (1.5410883333333334 [based on 6 runs with cutoff 60.0]) with flip 37

          
============= Performing 23 bonus runs of state: c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (1.5410883333333334 [based on 6 runs with cutoff 60.0]) ============ 

829/100000000, 15705.129017000012/18000.0
830/100000000, 15765.129017000012/18000.0
834/100000000, 15830.113986000011/18000.0
839/100000000, 15842.336823000012/18000.0
842/100000000, 15905.313579000012/18000.0
845/100000000, 15968.764751000012/18000.0
848/100000000, 16021.717032000011/18000.0
          -> After 23 bonus runs: c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (106.61679055172414 [based on 29 runs with cutoff 60.0])

    Changing ["iter: 3->5"], evaluating ...
        -> worse: (2.084064 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->1.950"], evaluating ...
853/100000000, 16035.982504000012/18000.0
        -> worse: (6.159527 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.0"], evaluating ...
        -> worse: (9.077257 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
855/100000000, 16105.059761000013/18000.0
        -> worse: (600.0092229988 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->8"], evaluating ...
        -> worse: (3.220542 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.025"], evaluating ...
857/100000000, 16168.280303000012/18000.0
        -> worse: (600.0092528639001 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.05"], evaluating ...
        -> worse: (1.655854 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.075"], evaluating ...
        -> worse: (1.849661 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.15"], evaluating ...
860/100000000, 16231.785818000013/18000.0
        -> worse: (600.0092230747001 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
        -> worse: (3.795561 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.05"], evaluating ...
        -> worse: (2.257087 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->1.975"], evaluating ...
863/100000000, 16242.405647000014/18000.0
        -> worse: (4.567181 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.0"], evaluating ...
864/100000000, 16278.908242000014/18000.0
        -> worse: (36.502595 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->10"], evaluating ...
        -> worse: (2.265178 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->1.950"], evaluating ...
866/100000000, 16341.173420000014/18000.0
        -> worse: (600.0092348897001 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 3->12"], evaluating ...
        -> worse: (8.135662 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.125"], evaluating ...
868/100000000, 16409.309082000014/18000.0
        -> worse: (600.0092163565001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->1.975"], evaluating ...
869/100000000, 16422.024235000015/18000.0
        -> worse: (12.715153 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.15"], evaluating ...
        -> worse: (1.584583 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.1->2.125"], evaluating ...
871/100000000, 16483.608818000015/18000.0
        -> worse: (600.0092216622 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.025"], evaluating ...
872/100000000, 16520.730011000014/18000.0
        -> worse: (37.121193 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.1->2.075"], evaluating ...
        -> worse: (2.91113 [based on 1 runs with cutoff 60.0])
          
============= Performing 22 bonus runs of state: c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (106.61679055172414 [based on 29 runs with cutoff 60.0]) ============ 

874/100000000, 16583.641141000015/18000.0
880/100000000, 16596.154257000017/18000.0
884/100000000, 16662.017027000016/18000.0
886/100000000, 16688.069214000017/18000.0
State wants more detail (44+1) than incumbent (44), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (98.64124756818184 [based on 44 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (85.7252911590909 [based on 44 runs with cutoff 60.0])
889/100000000, 16751.94890800002/18000.0
 Same incumbent, new precision:
New Incumbent: 16751.94890800002, 97.15382341011332 [45, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
890/100000000, 16811.94890800002/18000.0
State wants more detail (45+1) than incumbent (45), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (109.78275781070224 [based on 45 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (97.15382341011332 [based on 45 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 16813.396998000022, 95.07326398815434 [46, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
State wants more detail (46+1) than incumbent (46), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (107.42856146699133 [based on 46 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (95.07326398815434 [based on 46 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 16816.312867000022, 93.08077205223616 [47, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
State wants more detail (47+1) than incumbent (47), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (105.1735056698213 [based on 47 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (93.08077205223616 [based on 47 runs with cutoff 60.0])
895/100000000, 16877.753806000022/18000.0
 Same incumbent, new precision:
New Incumbent: 16877.753806000022, 103.64179971781458 [48, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
896/100000000, 16937.753806000022/18000.0
State wants more detail (48+1) than incumbent (48), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (115.48260138503336 [based on 48 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (103.64179971781458 [based on 48 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 16939.248894000022, 101.55717294806325 [49, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
898/100000000, 16998.576655000023/18000.0
State wants more detail (49+1) than incumbent (49), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (114.33658423431838 [based on 49 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (101.55717294806325 [based on 49 runs with cutoff 60.0])
899/100000000, 17015.26214300002/18000.0
 Same incumbent, new precision:
New Incumbent: 17015.26214300002, 99.85973924910199 [50, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
900/100000000, 17075.26214300002/18000.0
State wants more detail (50+1) than incumbent (50), doing incumbent first:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (124.05005454963202 [based on 50 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (99.85973924910199 [based on 50 runs with cutoff 60.0])
 Same incumbent, new precision:
New Incumbent: 17076.69042000002, 97.92971057755096 [51, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
          -> After 22 bonus runs for LM: c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (121.64481797022746 [based on 51 runs with cutoff 60.0])

   LM for iteration 11: c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (121.64481797022746 [based on 51 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 11): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 11): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 97.92971057755096, based on 51 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (121.64481797022746 [based on 51 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (97.92971057755096 [based on 51 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.1 c2=2.1 iter=3 rad=2 step=0.5 (121.64481797022746 [based on 51 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (97.92971057755096 [based on 51 runs with cutoff 60.0])
902/100000000, 17078.073409000022/18000.0
iteration 12, flip 39, evaluation count 902
    perturb to ---> c1=2.075 c2=2.125 iter=5 rad=2 step=0.8 (2.9456785 [based on 2 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.125 iter=5 rad=2 step=1.2 (1.79011 [based on 1 runs with cutoff 60.0])
    perturb to ---> c1=2.075 c2=2.125 iter=8 rad=2 step=1.2 (100000000 [based on 0 runs with cutoff 0])
   BLS in iteration 12, start with c1=2.075 c2=2.125 iter=8 rad=2 step=1.2 (3.668686 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.125->2.05"], evaluating ...
904/100000000, 17085.344303000024/18000.0
          -> Take improving step to neighbour c1=2.075 c2=2.05 iter=8 rad=2 step=1.2 (3.602208 [based on 1 runs with cutoff 60.0]) with flip 39

          
============= Performing 1 bonus runs of state: c1=2.075 c2=2.05 iter=8 rad=2 step=1.2 (3.602208 [based on 1 runs with cutoff 60.0]) ============ 

          -> After 1 bonus runs: c1=2.075 c2=2.05 iter=8 rad=2 step=1.2 (2.7909805 [based on 2 runs with cutoff 60.0])

    Changing ["c1: 2.075->2.025"], evaluating ...
906/100000000, 17106.059559000023/18000.0
        -> worse: (18.735503 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.075->2.05"], evaluating ...
          -> Take improving step to neighbour c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (2.4980700000000002 [based on 2 runs with cutoff 60.0]) with flip 40

          
============= Performing 2 bonus runs of state: c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (2.4980700000000002 [based on 2 runs with cutoff 60.0]) ============ 

          -> After 2 bonus runs: c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (2.1297995 [based on 4 runs with cutoff 60.0])

    Changing ["step: 1.2->0.8"], evaluating ...
911/100000000, 17120.464078000023/18000.0
        -> worse: (5.885321 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->10"], evaluating ...
912/100000000, 17148.086597000023/18000.0
        -> worse: (27.622519 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.0"], evaluating ...
913/100000000, 17201.253031000022/18000.0
        -> worse: (53.166434 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.0"], evaluating ...
        -> worse: (5.273244 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.2->0.5"], evaluating ...
        -> worse: (4.499207 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->1.950"], evaluating ...
916/100000000, 17271.025482000023/18000.0
        -> worse: (600.0092850091 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->1"], evaluating ...
917/100000000, 17326.780382000023/18000.0
        -> worse: (55.7549 [based on 1 runs with cutoff 60.0])
    Changing ["iter: 8->3"], evaluating ...
        -> worse: (3.231329 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.05->1.950"], evaluating ...
920/100000000, 17393.243040000023/18000.0
        -> worse: (600.0092829886001 [based on 1 runs with cutoff 60.0])
    Changing ["step: 1.2->1.0"], evaluating ...
        -> worse: (17.477576499999998 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 8->12"], evaluating ...
923/100000000, 17406.194811000023/18000.0
        -> worse: (5.287276 [based on 2 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.1"], evaluating ...
924/100000000, 17435.176041000024/18000.0
        -> worse: (28.98123 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.125"], evaluating ...
        -> worse: (2.806012 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.075"], evaluating ...
927/100000000, 17500.788065000022/18000.0
        -> worse: (600.0092093903002 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.15"], evaluating ...
928/100000000, 17520.643892000022/18000.0
        -> worse: (19.855827 [based on 1 runs with cutoff 60.0])
    Changing ["rad: 2->3"], evaluating ...
        -> worse: (2.552571 [based on 2 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.025"], evaluating ...
        -> worse: (3.269068 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->2.125"], evaluating ...
932/100000000, 17559.633369000025/18000.0
        -> worse: (30.615267 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->1.975"], evaluating ...
933/100000000, 17619.633369000025/18000.0
        -> worse: (600.0092752533001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.15"], evaluating ...
934/100000000, 17679.633369000025/18000.0
        -> worse: (600.0092065298 [based on 1 runs with cutoff 60.0])
    Changing ["c1: 2.05->1.975"], evaluating ...
935/100000000, 17739.633369000025/18000.0
        -> worse: (600.0092890894001 [based on 1 runs with cutoff 60.0])
    Changing ["c2: 2.05->2.1"], evaluating ...
        -> worse: (2.8393509999999997 [based on 2 runs with cutoff 60.0])
    Changing ["iter: 8->5"], evaluating ...
938/100000000, 17749.766686000024/18000.0
        -> worse: (4.454615 [based on 1 runs with cutoff 60.0])
          
============= Performing 23 bonus runs of state: c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (2.1297995 [based on 4 runs with cutoff 60.0]) ============ 

941/100000000, 17814.146544000025/18000.0
942/100000000, 17874.146544000025/18000.0
946/100000000, 17939.822188000024/18000.0
950/100000000, 17950.348302000024/18000.0
951/100000000, 18010.348302000024/18000.0
ParamILS has reached the specified CPU time limit of 18000.0 seconds => stopping the search now.
          -> After 23 bonus runs for LM: c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (142.89007141176472 [based on 17 runs with cutoff 60.0])

   LM for iteration 12: c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (142.89007141176472 [based on 17 runs with cutoff 60.0])

========== DETAILED RESULTS (iteration 12): ==========
================================================

==================================================================
Best parameter configuration found so far (end of iteration 12): c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Training quality of this incumbent parameter configuration: 97.92971057755096, based on 51 runs with cutoff 60.0
==================================================================

Comparing LM against incumbent:
c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (142.89007141176472 [based on 17 runs with cutoff 60.0])
c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (97.92971057755096 [based on 51 runs with cutoff 60.0])
Incumbent better, keeping it
rejecting worse c1=2.05 c2=2.05 iter=8 rad=2 step=1.2 (142.89007141176472 [based on 17 runs with cutoff 60.0]), going back to c1=2.075 c2=2.125 iter=5 rad=2 step=1.0 (97.92971057755096 [based on 51 runs with cutoff 60.0])
ParamILS has reached the specified CPU time limit of 18000.0 seconds => stopping the search now.
Final solution for depth 1 with limit N=2000, and cutoff time=60.0.
New Incumbent: 18010.348302000024, 97.92971057755096 [51, 60.0]. With state c1=2.075, c2=2.125, iter=5, rad=2, step=1.0

==================================================================
ParamILS is finished.
==================================================================

Final best parameter configuration found: c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Active parameters: c1=2.075, c2=2.125, iter=5, rad=2, step=1.0

==================================================================
Training quality of this final best found parameter configuration: 97.92971057755096, based on 51 runs with cutoff 60.0
==================================================================


==================================================================
Computing validation result on independent data -- 100 runs with cutoff time 60.0...
==================================================================
RastriginS3: 3.12858
RastriginR3: 3.56218
WeierstrassW3: 1.714675
SphereS3: 29.190016
WeierstrassW2: 1.625663
GriewankG2: 1.268063
RosenbrockR2: 1.411414
EllipticE2: 60.00101000000001
SchwefelS3: 1.404953
EllipticE3: 37.959369
SphereS2: 1.289848
SchwefelS2: 1.483065
RastriginR2: 49.446257
Ackley: 1.551826
RastriginS2: 60.00044985082001
RosenbrockR3: 1.720146
GriewankG3: 1.539012
GriewankG2: 1.332916
RastriginR2: 4.712416
SphereS2: 1.416921
WeierstrassW3: 60.00101000000001
SchwefelS2: 1.468834
Ackley: 1.413541
RosenbrockR2: 1.813278
SchwefelS3: 1.236265
GriewankG3: 1.381703
RastriginR3: 1.926262
EllipticE3: 60.00101000000001
RastriginS2: 60.00043989918001
WeierstrassW2: 60.00001000000001
RosenbrockR3: 1.38948
EllipticE2: 15.003714
RastriginS3: 60.00101000000001
SphereS3: 26.053067
RosenbrockR2: 1.448372
EllipticE3: 13.466331
SphereS3: 1.998317
SchwefelS3: 1.449209
SchwefelS2: 1.500547
EllipticE2: 60.00101000000001
RastriginS2: 60.00043989918001
RosenbrockR3: 1.767236
SphereS2: 1.398004
Ackley: 1.43302
RastriginS3: 36.61349
RastriginR2: 20.499794
WeierstrassW2: 2.528366
RastriginR3: 3.434258
WeierstrassW3: 60.00101000000001
GriewankG3: 1.362902
GriewankG2: 1.264785
SchwefelS3: 1.422958
EllipticE2: 17.758454
RosenbrockR3: 1.547223
Ackley: 1.475416
WeierstrassW2: 7.985488
WeierstrassW3: 60.00101000000001
RastriginS3: 60.00100989918001
SphereS3: 14.255149
SphereS2: 1.413905
RosenbrockR2: 1.88761
SchwefelS2: 1.510599
GriewankG2: 1.257713
GriewankG3: 1.587649
RastriginS2: 60.00043094292001
RastriginR2: 2.653043
RastriginR3: 2.292952
EllipticE3: 20.449972
RosenbrockR2: 2.666338
Ackley: 1.436654
RastriginR3: 2.355637
EllipticE2: 60.00101000000001
SphereS3: 60.00101000000001
EllipticE3: 22.658717
RosenbrockR3: 1.709336
GriewankG2: 1.276491
RastriginS3: 60.00101000000001
SchwefelS2: 1.396187
SchwefelS3: 1.425985
SphereS2: 1.323213
RastriginR2: 42.495388
GriewankG3: 1.357815
WeierstrassW3: 48.338982
WeierstrassW2: 23.500663
RastriginS2: 41.39374
Ackley: 1.426022
RastriginS3: 60.00100989918001
RastriginR2: 5.951156
RastriginR3: 3.553879
SphereS2: 1.369382
SchwefelS3: 1.456242
WeierstrassW3: 2.081692
GriewankG2: 1.284354
EllipticE3: 29.956171
RastriginS2: 60.00043989918001
WeierstrassW2: 60.00001000000001
SphereS3: 21.157781
EllipticE2: 20.53164
RosenbrockR3: 1.334565
GriewankG3: 1.338602
Combined result: 120.50026260896394

================================================================
Final best parameter configuration: c1=2.075, c2=2.125, iter=5, rad=2, step=1.0
==================================================================
Active parameters: c1=2.075, c2=2.125, iter=5, rad=2, step=1.0

================================================================
Training quality of this final best found parameter configuration: 97.92971057755096, based on 51 runs with cutoff 60.0
Test quality of this final best found parameter configuration: 120.50026260896394, based on 100 independent runs with cutoff 60.0
==================================================================
